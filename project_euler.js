// 1+++++++++++++++++++++++++++++++++++++++++++++
// Multiples of 3 or 5
/* <p>If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.</p>
<p>Find the sum of all the multiples of $3$ or $5$ below $1000$.</p> */

// function sum3_5mult (num) {
//     let result=0;
//     for (let i=0; i<num;i++) {
//         if(i%3 === 0 || i%5 === 0) result += i;
//     }
//     return result;
// };

// console.log(sum3_5mult(1000)); // V

// 2 +++++++++++++++++++++++++++++++++++++++++++++
// Even Fibonacci Numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 
//  and , the first terms will be: 1 2 3 5 8 13 21 34 55 89 ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// function fibon_even_lt_4M(num) {    // num = 4 000 000 
//     let sum = 0;
//     const arrfibonachi = [1,1];
//     for (let i = 2; arrfibonachi[i-1]+arrfibonachi[i-2] <= num; i++) {
//         arrfibonachi[i] = arrfibonachi[i-1]+arrfibonachi[i-2];
//         if (arrfibonachi[i]%2===0) sum += arrfibonachi[i];
//     }
//     console.log(arrfibonachi);
//     return sum;
// }

// console.log(fibon_even_lt_4M(4000000)); // V

// 3 +++++++++++++++++++++++++++++++++++++++++++++
// Largest Prime Factor
// The prime factors of 13195 are 5 7 13 29
// What is the largest prime factor of the number 600 851 475 143 ?


// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i=2; i<=pivot; i++) {
//         if (num%i ===0) return false;
//     }
//     if (num==1) return false;
//     return true;
// }
// function largPrimFactor(num) {
//     console.log(num);
//     const factors = [];
//     const largfactors = [];
//     let pivot = Math.sqrt(num);
//     console.log(pivot);
//     for (let i=2; i<=pivot; i++) {
//         if(num%i === 0) {
//             factors.push(i);
//             largfactors.push(num/i);
//         }
//     }
//     console.log(factors);
//     console.log(largfactors);
//     for(let i=0; i<largfactors.length; i++) {
//         console.log(isPrime(largfactors[i]));
//         if(isPrime(largfactors[i])) return true;
//     }
//     for(let i=factors.length-1; i>=0; i--) {
//         console.log(factors[i]);
//         console.log(isPrime(factors[i]));
//         if(isPrime(factors[i])) return factors[i];
//     }
// //     let pivot = Math.floor(num^(1/2));
// //     for (let i = pivot; i <)
// }

// console.log(largPrimFactor(600851475143)); // Answer is 6857 V

// 4 +++++++++++++++++++++++++++++++++++++++++++++
// Largest Palindrome Product
/* <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two $2$-digit numbers is $9009 = 91 \times 99$.</p>
<p>Find the largest palindrome made from the product of two $3$-digit numbers.</p> */

// function findPalindrom() {
//     let palindrom = 0 ;  // x0000x

//     for (let x = 999; x>0; x--) {
//         for(let y = 999; y>0; y--) {
//             let product = x*y;
//             if (product>100000) {
//                 const a = Math.floor(product/100000);
//                 const b = Math.floor((product-a*100000)/10000);
//                 const c = Math.floor((product - a*100000 - b*10000)/1000);
//                 const d = Math.floor((product - a*100000 - b*10000 - c*1000)/100);
//                 const e = Math.floor((product - a*100000 - b*10000 - c*1000 - d*100)/10);
//                 const f = product - a*100000 - b*10000 - c*1000 - d*100 - e*10;
//                 // console.log(product);
//                 // console.log(a,b,c,d,e,f);
//                 if (a == f && b==e && c==d) {
//                     if (product > palindrom) {
//                         palindrom = product;
//                         console.log(palindrom);
//                     }
//                 }
//             }
//         }
//     }
//     return palindrom;   
// }

// console.log(findPalindrom());

// 5 +++++++++++++++++++++++++++++++++++++++++++++
// Smallest Multiple
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?

// function smallMulti(num) {
//     let search = 1;

//         for(let i = 1; i<=num; i++) {
//             if(search%i !== 0) {
//                 search++;
//                 i=1; 
//             }
//         }
//     return search;
// }

// console.log(smallMulti(20));

// 6 +++++++++++++++++++++++++++++++++++++++++++++
// Sum Square Difference
/* <p>The sum of the squares of the first ten natural numbers is,</p>
$$1^2 + 2^2 + ... + 10^2 = 385.$$
<p>The square of the sum of the first ten natural numbers is,</p>
$$(1 + 2 + ... + 10)^2 = 55^2 = 3025.$$
<p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025 - 385 = 2640$.</p>
<p>Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p> */

// function findDiff(num) {
//     let sum = (num / 2) * (num + 1);
//     console.log(sum)
//     let squaresum = sum ** 2;
//     console.log(squaresum)
//     let sumOfsquare = 0;
//     for (let i = 0; i <= num; i++) {
//         sumOfsquare += i ** 2;
//     }
//     console.log(sumOfsquare);
//     let result = squaresum - sumOfsquare;
//     console.log(result);
// }

// findDiff(100);

// 7 +++++++++++++++++++++++++++++++++++++++++++++
// 10001st Prime
// By listing the first six prime numbers: 2 3 5 7 11 and 13 we can see that the 6th prime is 13.
// What is the 10001st prime number?

// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     return true;
// }

// function findPrime(pos) {
//     const arrPrime = [2];
//     let num = 3;
//     while (!arrPrime[pos-1]) {
//         if (isPrime(num)) {
//             arrPrime.push(num);
//             num++;
//         } else {
//             num++
//         }
//     }
//     console.log(arrPrime);
//     console.log(arrPrime[pos-1]);

// }

// findPrime(10001); //104743

// 8 +++++++++++++++++++++++++++++++++++++++++++++
// Largest Product in a Series

// let str = `73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450`.split('\n').join('');

// The four adjacent digits in the 1000 
// -digit number that have the greatest product are 9*9*8*9=5832

//  Find the thirteen adjacent digits in the 13
// -digit number that have the greatest product. What is the value of this product?

// function findadjecents(QuantatySib) {
//     let maxproduct = 0;
//     let arrnum = []
//     for(let i = 0; i<str.length; i++) {
//         const newstr = str.slice(i,QuantatySib+i);
//         let product = 1;
//         for (let j=0; j<newstr.length; j++) {
//             let n = parseInt(newstr[j]);
//             product = product * n;
//         }
//         if (product > maxproduct) {
//             maxproduct = product;
//             arrnum = [...newstr];
//             console.log(maxproduct);
//         }
//     }
//     return {
//         maxproduct: maxproduct,
//         members: arrnum
//         }
//  }
//  console.log(findadjecents(13));

// 9 +++++++++++++++++++++++++++++++++++++++++++++
// Special Pythagorean Triplet
/* <p>A Pythagorean triplet is a set of three natural numbers, $a \lt b \lt c$, for which,
$$a^2 + b^2 = c^2.$$</p>
<p>For example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.</p>
<p>There exists exactly one Pythagorean triplet for which $a + b + c = 1000$.<br>Find the product $abc$.</p> */

// function check(a,b,c) {
//         if ((a**2 + b**2)==c**2 && (a+b+c)==1000) return true;
//         return false;
// }

// function PythTriplet() {
//         for(let a=0; a<1000; a++) {
//                 for (let b=a+1; b<1000; b++) {
//                         for(let c=b+1; c<1000; c++) {
//                                 // console.log([a,b,c]);
//                                 if(check(a,b,c)) {
//                                         return {
//                                         a: a,
//                                         b: b,
//                                         c: c
//                                         }
//                                 }
//                         }
//                 }
//         }
// }

// console.log(PythTriplet());

// 10 +++++++++++++++++++++++++++++++++++++++++++++
// Summation of Primes
// The sum of the primes below 10
//  is 2+3+5+7=17
// Find the sum of all the primes below two million.

// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     return true;
// }

// function findPrime(total) {
//     const arrPrime = [2];
//     let num = 3;
//     let pos = 0;
//     while (arrPrime[pos]<2000000) {
//         if (isPrime(num)) {
//             arrPrime.push(num);
//             num++;
//             pos++;
//         } else {
//             num++
//         }
//     }
//     console.log(arrPrime);
//     console.log(arrPrime[pos]);
//     arrPrime.pop();
//     console.log(arrPrime.reduce((sum,element)=>sum+element));

// }

// findPrime();

// 11 +++++++++++++++++++++++++++++++++++++++++++++
// Largest Product in a Grid

/* <p>The product of these numbers is $26 \times 63 \times 78 \times 14 = 1788696$.</p>
<p>What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the $20 \times 20$ grid?</p> */

// let matrix = [
//         [08,2, 22, 97, 38, 15,0, 40,0, 75,4,5,7, 78, 52, 12, 50, 77, 91,8],
//         [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48,4, 56, 62,0],
//         [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30,3, 49, 13, 36, 65],
//         [52, 70, 95, 23,4, 60, 11, 42, 69, 24, 68, 56,1, 32, 56, 71, 37,2, 36, 91],
//         [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
//         [24, 47, 32, 60, 99,3, 45,2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
//         [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
//         [67, 26, 20, 68,2, 62, 12, 20, 95, 63, 94, 39, 63,8, 40, 91, 66, 49, 94, 21],
//         [24, 55, 58,5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
//         [21, 36, 23,9, 75,0, 76, 44, 20, 45, 35, 14,0, 61, 33, 97, 34, 31, 33, 95],
//         [78, 17, 53, 28, 22, 75, 31, 67, 15, 94,3, 80,4, 62, 16, 14,9, 53, 56, 92],
//         [16, 39,5, 42, 96, 35, 31, 47, 55, 58, 88, 24,0, 17, 54, 24, 36, 29, 85, 57],
//         [86, 56,0, 48, 35, 71, 89,7,5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
//         [19, 80, 81, 68,5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77,4, 89, 55, 40],
//         [04, 52,8, 83, 97, 35, 99, 16,7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
//         [88, 36, 68, 87, 57, 62, 20, 72,3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
//         [04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18,8, 46, 29, 32, 40, 62, 76, 36],
//         [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74,4, 36, 16],
//         [20, 73, 35, 29, 78, 31, 90,1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57,5, 54],
//         [01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52,1, 89, 19, 67, 48]
// ];

// function findProduct(matrix) {
//         let maxproduct = 0;
//         let obj = {};
//         // diagonal check 1
//         for (let i = 0; i < matrix.length - 3; i++) {
//                 for (let j = 0; j < matrix[i].length - 3; j++) {
//                         let product = matrix[i][j] * matrix[i + 1][j + 1] * matrix[i + 2][j + 2] * matrix[i + 3][j + 3];
//                         if (product > maxproduct) {
//                                 maxproduct = product;
//                                 obj = { 1: matrix[i][j], 2: matrix[i + 1][j + 1], 3: matrix[i + 2][j + 2], 4: matrix[i + 3][j + 3], direction: "d1" };
//                         }
//                 }
//         }
//         // diagonal check 2
//         for (let i = 0; i < matrix.length - 3; i++) {
//                 for (let j = 3; j < matrix[i].length; j++) {
//                         let product = matrix[i][j] * matrix[i + 1][j - 1] * matrix[i + 2][j - 2] * matrix[i + 3][j - 3];
//                         if (product > maxproduct) {
//                                 maxproduct = product;
//                                 obj = { 1: matrix[i][j], 2: matrix[i + 1][j - 1], 3: matrix[i + 2][j - 2], 4: matrix[i + 3][j - 3], direction: "d2" };
//                         }
//                 }
//         }
//         // gorisontal check
//         for (let i = 0; i < matrix.length; i++) {
//                 for (let j = 0; j < matrix[i].length - 3; j++) {
//                         let product = matrix[i][j] * matrix[i][j + 1] * matrix[i][j + 2] * matrix[i][j + 3];
//                         if (product > maxproduct) {
//                                 maxproduct = product;
//                                 obj = { 1: matrix[i][j], 2: matrix[i][j + 1], 3: matrix[i][j + 2], 4: matrix[i][j + 3], direction: "gorisont" };
//                         }
//                 }
//         }
//         // vertical check
//         for (let i = 0; i < matrix.length-3; i++) {
//                 for (let j = 0; j < matrix[i].length; j++) {
//                         let product = matrix[i][j] * matrix[i+1][j] * matrix[i+2][j] * matrix[i+3][j];
//                         if (product > maxproduct) {
//                                 maxproduct = product;
//                                 obj = { 1: matrix[i][j], 2: matrix[i+1][j], 3: matrix[i+2][j], 4: matrix[i+3][j], direction: "vertical"};
//                         }
//                 }
//         }

//         console.log(maxproduct);
//         console.log(obj);
// };

// findProduct(matrix);

// 12 +++++++++++++++++++++++++++++++++++++++++++++
// Highly Divisible Triangular Number
/* <p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
<p>Let us list the factors of the first seven triangle numbers:</p>
\begin{align}
\mathbf 1 &amp;\colon 1\\
\mathbf 3 &amp;\colon 1,3\\
\mathbf 6 &amp;\colon 1,2,3,6\\
\mathbf{10} &amp;\colon 1,2,5,10\\
\mathbf{15} &amp;\colon 1,3,5,15\\
\mathbf{21} &amp;\colon 1,3,7,21\\
\mathbf{28} &amp;\colon 1,2,4,7,14,28
\end{align}
<p>We can see that $28$ is the first triangle number to have over five divisors.</p>
<p>What is the value of the first triangle number to have over five hundred divisors?</p> */

// function sumseriesnum(n) {
//         return (n/2)*(n+1);
// }

// function factortoArray(n) {
//         let arr = [1];
//         for (let i =2; i<Math.sqrt(n); i++) {
//                 if(n%i===0) {
//                         arr.push(i);
//                         arr.push(n/i);
//                 }
//         }
//         arr.push(n);
//         return arr;
// }

// function findnumber(numDivisors) {
//         let testarr = [];
//      for(let i=2; testarr.length<numDivisors; i++) {
//         let triang = sumseriesnum(i);
//         testarr = factortoArray(triang);
//         if (testarr.length>numDivisors) return triang;
//         testarr=[];
//      }
// }

// console.log(sumseriesnum(12374));
// console.log(factortoArray(76564125));

// console.log(findnumber(500));

// 13 +++++++++++++++++++++++++++++++++++++++++++++
// Work out the first ten digits of the sum of the following one-hundred 
// 50-digit numbers.
// const dig_50 = ['37107287533902102798797998220837590246510135740250',
//                 '46376937677490009712648124896970078050417018260538',
//                 '74324986199524741059474233309513058123726617309629',
//                 '91942213363574161572522430563301811072406154908250',
//                 '23067588207539346171171980310421047513778063246676',
//                 '89261670696623633820136378418383684178734361726757',
//                 '28112879812849979408065481931592621691275889832738',
//                 '44274228917432520321923589422876796487670272189318',
//                 '47451445736001306439091167216856844588711603153276',
//                 '70386486105843025439939619828917593665686757934951',
//                 '62176457141856560629502157223196586755079324193331',
//                 '64906352462741904929101432445813822663347944758178',
//                 '92575867718337217661963751590579239728245598838407',
//                 '58203565325359399008402633568948830189458628227828',
//                 '80181199384826282014278194139940567587151170094390',
//                 '35398664372827112653829987240784473053190104293586',
//                 '86515506006295864861532075273371959191420517255829',
//                 '71693888707715466499115593487603532921714970056938',
//                 '54370070576826684624621495650076471787294438377604',
//                 '53282654108756828443191190634694037855217779295145',
//                 '36123272525000296071075082563815656710885258350721',
//                 '45876576172410976447339110607218265236877223636045',
//                 '17423706905851860660448207621209813287860733969412',
//                 '81142660418086830619328460811191061556940512689692',
//                 '51934325451728388641918047049293215058642563049483',
//                 '62467221648435076201727918039944693004732956340691',
//                 '15732444386908125794514089057706229429197107928209',
//                 '55037687525678773091862540744969844508330393682126',
//                 '18336384825330154686196124348767681297534375946515',
//                 '80386287592878490201521685554828717201219257766954',
//                 '78182833757993103614740356856449095527097864797581',
//                 '16726320100436897842553539920931837441497806860984',
//                 '48403098129077791799088218795327364475675590848030',
//                 '87086987551392711854517078544161852424320693150332',
//                 '59959406895756536782107074926966537676326235447210',
//                 '69793950679652694742597709739166693763042633987085',
//                 '41052684708299085211399427365734116182760315001271',
//                 '65378607361501080857009149939512557028198746004375',
//                 '35829035317434717326932123578154982629742552737307',
//                 '94953759765105305946966067683156574377167401875275',
//                 '88902802571733229619176668713819931811048770190271',
//                 '25267680276078003013678680992525463401061632866526',
//                 '36270218540497705585629946580636237993140746255962',
//                 '24074486908231174977792365466257246923322810917141',
//                 '91430288197103288597806669760892938638285025333403',
//                 '34413065578016127815921815005561868836468420090470',
//                 '23053081172816430487623791969842487255036638784583',
//                 '11487696932154902810424020138335124462181441773470',
//                 '63783299490636259666498587618221225225512486764533',
//                 '67720186971698544312419572409913959008952310058822',
//                 '95548255300263520781532296796249481641953868218774',
//                 '76085327132285723110424803456124867697064507995236',
//                 '37774242535411291684276865538926205024910326572967',
//                 '23701913275725675285653248258265463092207058596522',
//                 '29798860272258331913126375147341994889534765745501',
//                 '18495701454879288984856827726077713721403798879715',
//                 '38298203783031473527721580348144513491373226651381',
//                 '34829543829199918180278916522431027392251122869539',
//                 '40957953066405232632538044100059654939159879593635',
//                 '29746152185502371307642255121183693803580388584903',
//                 '41698116222072977186158236678424689157993532961922',
//                 '62467957194401269043877107275048102390895523597457',
//                 '23189706772547915061505504953922979530901129967519',
//                 '86188088225875314529584099251203829009407770775672',
//                 '11306739708304724483816533873502340845647058077308',
//                 '82959174767140363198008187129011875491310547126581',
//                 '97623331044818386269515456334926366572897563400500',
//                 '42846280183517070527831839425882145521227251250327',
//                 '55121603546981200581762165212827652751691296897789',
//                 '32238195734329339946437501907836945765883352399886',
//                 '75506164965184775180738168837861091527357929701337',
//                 '62177842752192623401942399639168044983993173312731',
//                 '32924185707147349566916674687634660915035914677504',
//                 '99518671430235219628894890102423325116913619626622',
//                 '73267460800591547471830798392868535206946944540724',
//                 '76841822524674417161514036427982273348055556214818',
//                 '97142617910342598647204516893989422179826088076852',
//                 '87783646182799346313767754307809363333018982642090',
//                 '10848802521674670883215120185883543223812876952786',
//                 '71329612474782464538636993009049310363619763878039',
//                 '62184073572399794223406235393808339651327408011116',
//                 '66627891981488087797941876876144230030984490851411',
//                 '60661826293682836764744779239180335110989069790714',
//                 '85786944089552990653640447425576083659976645795096',
//                 '66024396409905389607120198219976047599490197230297',
//                 '64913982680032973156037120041377903785566085089252',
//                 '16730939319872750275468906903707539413042652315011',
//                 '94809377245048795150954100921645863754710598436791',
//                 '78639167021187492431995700641917969777599028300699',
//                 '15368713711936614952811305876380278410754449733078',
//                 '40789923115535562561142322423255033685442488917353',
//                 '44889911501440648020369068063960672322193204149535',
//                 '41503128880339536053299340368006977710650566631954',
//                 '81234880673210146739058568557934581403627822703280',
//                 '82616570773948327592232845941706525094512325230608',
//                 '22918802058777319719839450180888072429661980811197',
//                 '77158542502016545090413245809786882778948721859617',
//                 '72107838435069186155435662884062257473692284509516',
//                 '20849603980134001723930671666823555245252804609722',
//                 '53503534226472524250874054075591789781264330331690'];

// function first_10_dig(arr) {
//         let memory = 0;
//         let sum = '';
//         for (let i = 49; i >= 0; i--) {
//                 for (let j = 0; j < arr.length; j++) {
//                         memory += +arr[j][i];
//                         // console.log(memory);
//                         if (j === arr.length-1) {
//                                 let char = memory.toString();
//                                 // console.log(char);
//                                 let suffix = char.slice(-1);
//                                 // console.log(suffix);
//                                 sum = [suffix,sum].join('');
//                                 prefix = char.slice(0,-1);
//                                 memory=+prefix;
//                                 console.log(sum);
//                                 console.log(memory);
//                                 // console.log(sum.length);
//                         }


//                 }
//         }
//         sum = memory.toString() + sum;
//         console.log(sum);
//         console.log(sum.length);
//         console.log(sum.slice(0,10));
// }

// first_10_dig(dig_50);

// 14 +++++++++++++++++++++++++++++++++++++++++++++
// Longest Collatz Sequence
/* <p>The following iterative sequence is defined for the set of positive integers:</p>
<ul style="list-style-type:none;">
<li>$n \to n/2$ ($n$ is even)</li>
<li>$n \to 3n + 1$ ($n$ is odd)</li></ul>
<p>Using the rule above and starting with $13$, we generate the following sequence:
$$13 \to 40 \to 20 \to 10 \to 5 \to 16 \to 8 \to 4 \to 2 \to 1.$$</p>
<p>It can be seen that this sequence (starting at $13$ and finishing at $1$) contains $10$ terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at $1$.</p>
<p>Which starting number, under one million, produces the longest chain?</p>
<p class="note"><b>NOTE:</b> Once the chain starts the terms are allowed to go above one million.</p> */

// function getnumber(number) {
//         maxchain = 0;
//         target_num = 0;
//         for(let i=number; i>4; i--) {
//                 let start_number = i;
//                 let work_number = i;
//                 let count=0
//                 while(!(work_number==1)) {
//                         if(work_number%2===0) {
//                                 work_number*=1/2;
//                                 count++;
//                         }else {
//                                 work_number= work_number*3+1;
//                                 count++
//                         }
//                 }
//                 if(count>maxchain) {
//                         target_num=start_number;
//                         maxchain=count;
//                 }
//         }
//         console.log({maxchain:maxchain, target_num:target_num});
// }

// getnumber(1000000); // V

// 15 +++++++++++++++++++++++++++++++++++++++++++++
// Lattice Paths 
// For description take a look to OneNote Problem 15

// function countWays(r, c, num, memo) {
//   const keymemo = memo[r.toString() +"_"+ c.toString()];
//   if (keymemo) return keymemo;
//   if (r == num && c == num) {
//     memo[num.toString() +"_"+ num.toString()] = 1;
//     return 1;
//   }
//   if (r < num && c == num) {
//     const rightstop = countWays(r + 1, c, num, memo);
//     memo[r.toString() +"_"+ c.toString()] = rightstop;
//     return rightstop;
//   }
//   if (r == num && c < num) {
//     const downstop = countWays(r, c + 1, num, memo);
//     memo[r.toString() +"_"+ c.toString()] = downstop;
//     return downstop;
//   } 
//   const toWaycount = countWays(r + 1, c, num, memo) + countWays(r, c + 1, num, memo);
//   memo[r.toString() +"_"+ c.toString()] = toWaycount;
//   return toWaycount;
// }

// function countWays_with_memo(r, c, num) {
//   const memo = {};
//   let count = countWays(r, c, num, memo);
//   console.log(memo);
//   return count;
// }

// console.log(countWays_with_memo(0, 0, 20));

// 16 +++++++++++++++++++++++++++++++++++++++++++++
// Power Digit Sum
// 2^15 = 32768 and the sum of its digits is 
// 3 + 2 + 7 + 6 +8 = 26
// What is the sum of the digits of the number 2^1000?

// 2^50 = 1125899906842624

// принимает массив строк из чисел любой размерности
// function sumBigNum(arr) {
//     let memory = 0;
//     let sum = '';
//     let maxnumdigits = 0;
//     for (el of arr) {
//         if (el.length > maxnumdigits) maxnumdigits = el.length;
//     }
//     const buildarr = arr.map((el) => {
//         // console.log(el);
//         while (el.length != maxnumdigits) { el = '0' + el; }
//         return el;
//     });
//     // console.log(buildarr);
//     for (let i = maxnumdigits - 1; i >= 0; i--) {
//         for (let j = 0; j < buildarr.length; j++) {
//             memory += +buildarr[j][i];
//             if (j === buildarr.length - 1) {
//                 let char = memory.toString();
//                 let suffix = char.slice(-1);
//                 sum = [suffix, sum].join('');
//                 prefix = char.slice(0, -1);
//                 memory = +prefix;
//             }
//         }
//     }
//     if (memory != 0) sum = memory.toString() + sum;
//     // console.log(sum);
//     return sum;
// }


// function multiplyBigNum(n1, n2) {
//     let arr_product = [];
//     let memory1 = 0;
//     let memory2 = '';
//     for (let i = n2.length - 1; i >= 0; i--) {
//         for (let j = n1.length - 1; j >= 0; j--) {
//             let product = +(n2[i]) * (+n1[j]) + memory1;
//             // console.log(product);
//             let midresult = product.toString();
//             if (j === 0) {
//                 memory2 = [midresult, memory2].join('');
//             } else {
//                 memory2 = [midresult.slice(-1), memory2].join('');
//             }
//             // console.log(memory2);
//             memory1 = +midresult.slice(0, -1);
//             // console.log(memory1);
//         }
//         arr_product.push(memory2);
//         memory1 = 0;
//         memory2 = '';
//     }
//     // console.log(arr_product);
//     // add to lower digit a zero before addition;
//     let times = 1;
//     for (let i = 1; i < arr_product.length; i++) {
//         let checktimes = times;
//         while (checktimes > 0) {
//             arr_product[i] = arr_product[i] + '0';
//             checktimes--;
//         }
//         times++;
//     }
//     // console.log(arr_product);
//     let res = sumBigNum(arr_product);
//     return res;
// }
// // Функция 2^n (n-pow)
// function powOfTwo(pow, num = 0) {
//     if (num === pow - 1) return '2';
//     return multiplyBigNum('2', powOfTwo(pow, num + 1));
// }
// // Функция суммирования чисел
// function sumdigits(num) {
//     let res = 0;
//     for (let i = 0; i < num.length; i++) {
//         res += +num[i];
//     }
//     return res;
// }

// console.log(sumdigits(powOfTwo(1000)));

// 17 +++++++++++++++++++++++++++++++++++++++++++++
// Number Letter Counts

// function spread(num) {
//     if (num <= 1000) {
//         const d = Math.floor(num / 1000);
//         const c = Math.floor((num - d * 1000) / 100);
//         const b = Math.floor((num - d * 1000 - c * 100) / 10);
//         const a = num - d * 1000 - c * 100 - b * 10;
//         return [d, c, b, a];
//     }
// }

// const hash_table_letter = {
//     1: 'one',
//     2: 'two',
//     3: 'three',
//     4: 'four',
//     5: 'five',
//     6: 'six',
//     7: 'seven',
//     8: 'eight',
//     9: 'nine',
//     10: 'ten',
//     11: 'eleven',
//     12: 'twelve',
//     13: 'thirteen',
//     14: 'fourteen',
//     15: 'fifteen',
//     16: 'sixteen',
//     17: 'seventeen',
//     18: 'eighteen',
//     19: 'nineteen',
//     20: 'twenty',
//     30: 'thirty',
//     40: 'forty',
//     50: 'fifty',
//     60: 'sixty',
//     70: 'seventy',
//     80: 'eighty',
//     90: 'ninety',
//     100: 'hundred',
//     1000: 'thousand',
//     and: 'and'
// }
// let listofnumbers = [];
// for (let i = 1; i <= 1000; i++) {
//     let constructor = '';
//     let arrNum = spread(i);
//     if (arrNum) {
//         if (arrNum[0] == 1) constructor = hash_table_letter[1] + ' ' + hash_table_letter[1000];
//         else if (arrNum[1] !== 0 && arrNum[2] == 0 && arrNum[3] == 0) constructor = hash_table_letter[arrNum[1]] + ' ' + hash_table_letter[100];
//         // if (arrNum[1]!==0 && arrNum[2] == 1  && arrNum[3] == 0) constructor = hash_table_letter[arrNum[1]]+ hash_table_letter[100] + hash_table_letter[and] + hash_table_letter[10];
//         else if (arrNum[1] !== 0 && arrNum[2] == 1) constructor = hash_table_letter[arrNum[1]] + ' ' + hash_table_letter[100] + ' and ' + hash_table_letter[10 + arrNum[3]];
//         else if (arrNum[1] !== 0 && arrNum[2] == 0 && arrNum[3] != 0) constructor = hash_table_letter[arrNum[1]] + ' ' + hash_table_letter[100] + ' and ' + hash_table_letter[arrNum[3]];
//         else if (arrNum[1] !== 0 && arrNum[2] > 1 && arrNum[3] == 0) constructor = hash_table_letter[arrNum[1]] + ' ' + hash_table_letter[100] + ' and ' + hash_table_letter[arrNum[2] * 10];
//         else if (arrNum[1] !== 0 && arrNum[2] > 1 && arrNum[3] != 0) constructor = hash_table_letter[arrNum[1]] + ' ' + hash_table_letter[100] + ' and ' + hash_table_letter[arrNum[2] * 10] + '-' + hash_table_letter[arrNum[3]];
//         else if (arrNum[1] == 0 && arrNum[2] == 1) constructor = hash_table_letter[10 + arrNum[3]];
//         else if (arrNum[1] == 0 && arrNum[2] == 0 && arrNum[3] != 0) constructor = hash_table_letter[arrNum[3]];
//         else if (arrNum[1] == 0 && arrNum[2] > 1 && arrNum[3] == 0) constructor = hash_table_letter[arrNum[2] * 10];
//         else if (arrNum[1] == 0 && arrNum[2] > 1 && arrNum[3] != 0) constructor = hash_table_letter[arrNum[2] * 10] + ' ' + hash_table_letter[arrNum[3]];
//     }
//     listofnumbers.push(constructor);
// }

// let newlist = listofnumbers.map(el => el.replaceAll(' ', '').replaceAll('-', ''));

// let count = newlist.reduce((res, el) => res + el.length, 0);


// console.log(spread(989));
// console.log(newlist);
// console.log(count); // 21124 V

// 18 +++++++++++++++++++++++++++++++++++++++++++++
// Maximum Path Sum I

// let testpyramid =  [[3],
//                     [7, 4],
//                     [2, 4, 6],
//                     [8, 5, 9, 3]];

// let pyramid = [[75],
//                 [95,64],
//                 [17,47,82],
//                 [18,35,87,10],
//                 [20,4,82,47,65],
//                 [19,1,23,75,3,34],
//                 [88,2,77,73,7,63,67],
//                 [99,65,4,28,6,16,70,92],
//                 [41,41,26,56,83,40,80,70,33],
//                 [41,48,72,33,47,32,37,16,94,29],
//                 [53,71,44,65,25,43,91,52,97,51,14],
//                 [70,11,33,28,77,73,17,78,39,68,17,57],
//                 [91,71,52,38,17,14,91,43,58,50,27,29,48],
//                 [63,66,4,68,89,53,67,30,73,16,69,87,40,31],
//                 [4,62,98,27,23,9,70,98,73,93,38,53,60,4,23]];
// // console.log(pyramid.length);

// function findMaxPath(i,j,arr) {

//     if(i>=arr.length) return 0;

//     let midresult = Math.max(findMaxPath(i+1,j,arr),findMaxPath(i+1,j+1,arr));
//     return (arr[i][j] + midresult);
// }

// console.log(findMaxPath(0,0,pyramid));

// Problem 67 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Maximum Path Sum II

// function findMaxPath(i,j,arr,memo) {
//     if (memo[i.toString()+'_'+j.toString()]) return memo[i.toString()+'_'+j.toString()];
//     if(i>=arr.length) return 0;

//     let midresult = Math.max(findMaxPath(i+1,j,arr,memo),findMaxPath(i+1,j+1,arr,memo));
//     memo[i.toString()+'_'+j.toString()] = arr[i][j] + midresult;
//     return (arr[i][j] + midresult);
// }

// function findPathwithMemo(i,j,arr) {
//     let memo = {};
//     let count = findMaxPath(i,j,arr,memo);
//     return count;
// }


// let bigPyramid = [[59],
// [73,41],
// [52,40,9],
// [26,53,6,34],
// [10,51,87,86,81],
// [61,95,66,57,25,68],
// [90,81,80,38,92,67,73],
// [30,28,51,76,81,18,75,44],
// [84,14,95,87,62,81,17,78,58],
// [21,46,71,58,2,79,62,39,31,9],
// [56,34,35,53,78,31,81,18,90,93,15],
// [78,53,4,21,84,93,32,13,97,11,37,51],
// [45,3,81,79,5,18,78,86,13,30,63,99,95],
// [39,87,96,28,3,38,42,17,82,87,58,7,22,57],
// [6,17,51,17,7,93,9,7,75,97,95,78,87,8,53],
// [67,66,59,60,88,99,94,65,55,77,55,34,27,53,78,28],
// [76,40,41,4,87,16,9,42,75,69,23,97,30,60,10,79,87],
// [12,10,44,26,21,36,32,84,98,60,13,12,36,16,63,31,91,35],
// [70,39,6,5,55,27,38,48,28,22,34,35,62,62,15,14,94,89,86],
// [66,56,68,84,96,21,34,34,34,81,62,40,65,54,62,5,98,3,2,60],
// [38,89,46,37,99,54,34,53,36,14,70,26,2,90,45,13,31,61,83,73,47],
// [36,10,63,96,60,49,41,5,37,42,14,58,84,93,96,17,9,43,5,43,6,59],
// [66,57,87,57,61,28,37,51,84,73,79,15,39,95,88,87,43,39,11,86,77,74,18],
// [54,42,5,79,30,49,99,73,46,37,50,2,45,9,54,52,27,95,27,65,19,45,26,45],
// [71,39,17,78,76,29,52,90,18,99,78,19,35,62,71,19,23,65,93,85,49,33,75,9,2],
// [33,24,47,61,60,55,32,88,57,55,91,54,46,57,7,77,98,52,80,99,24,25,46,78,79,5],
// [92,9,13,55,10,67,26,78,76,82,63,49,51,31,24,68,5,57,7,54,69,21,67,43,17,63,12],
// [24,59,6,8,98,74,66,26,61,60,13,3,9,9,24,30,71,8,88,70,72,70,29,90,11,82,41,34],
// [66,82,67,4,36,60,92,77,91,85,62,49,59,61,30,90,29,94,26,41,89,4,53,22,83,41,9,74,90],
// [48,28,26,37,28,52,77,26,51,32,18,98,79,36,62,13,17,8,19,54,89,29,73,68,42,14,8,16,70,37],
// [37,60,69,70,72,71,9,59,13,60,38,13,57,36,9,30,43,89,30,39,15,2,44,73,5,73,26,63,56,86,12],
// [55,55,85,50,62,99,84,77,28,85,3,21,27,22,19,26,82,69,54,4,13,7,85,14,1,15,70,59,89,95,10,19],
// [4,9,31,92,91,38,92,86,98,75,21,5,64,42,62,84,36,20,73,42,21,23,22,51,51,79,25,45,85,53,3,43,22],
// [75,63,2,49,14,12,89,14,60,78,92,16,44,82,38,30,72,11,46,52,90,27,8,65,78,3,85,41,57,79,39,52,33,48],
// [78,27,56,56,39,13,19,43,86,72,58,95,39,7,4,34,21,98,39,15,39,84,89,69,84,46,37,57,59,35,59,50,26,15,93],
// [42,89,36,27,78,91,24,11,17,41,5,94,7,69,51,96,3,96,47,90,90,45,91,20,50,56,10,32,36,49,4,53,85,92,25,65],
// [52,9,61,30,61,97,66,21,96,92,98,90,6,34,96,60,32,69,68,33,75,84,18,31,71,50,84,63,3,3,19,11,28,42,75,45,45],
// [61,31,61,68,96,34,49,39,5,71,76,59,62,67,6,47,96,99,34,21,32,47,52,7,71,60,42,72,94,56,82,83,84,40,94,87,82,46],
// [1,20,60,14,17,38,26,78,66,81,45,95,18,51,98,81,48,16,53,88,37,52,69,95,72,93,22,34,98,20,54,27,73,61,56,63,60,34,63],
// [93,42,94,83,47,61,27,51,79,79,45,1,44,73,31,70,83,42,88,25,53,51,30,15,65,94,80,44,61,84,12,77,2,62,2,65,94,42,14,94],
// [32,73,9,67,68,29,74,98,10,19,85,48,38,31,85,67,53,93,93,77,47,67,39,72,94,53,18,43,77,40,78,32,29,59,24,6,2,83,50,60,66],
// [32,1,44,30,16,51,15,81,98,15,10,62,86,79,50,62,45,60,70,38,31,85,65,61,64,6,69,84,14,22,56,43,9,48,66,69,83,91,60,40,36,61],
// [92,48,22,99,15,95,64,43,1,16,94,2,99,19,17,69,11,58,97,56,89,31,77,45,67,96,12,73,8,20,36,47,81,44,50,64,68,85,40,81,85,52,9],
// [91,35,92,45,32,84,62,15,19,64,21,66,6,1,52,80,62,59,12,25,88,28,91,50,40,16,22,99,92,79,87,51,21,77,74,77,7,42,38,42,74,83,2,5],
// [46,19,77,66,24,18,5,32,2,84,31,99,92,58,96,72,91,36,62,99,55,29,53,42,12,37,26,58,89,50,66,19,82,75,12,48,24,87,91,85,2,7,3,76,86],
// [99,98,84,93,7,17,33,61,92,20,66,60,24,66,40,30,67,5,37,29,24,96,3,27,70,62,13,4,45,47,59,88,43,20,66,15,46,92,30,4,71,66,78,70,53,99],
// [67,60,38,6,88,4,17,72,10,99,71,7,42,25,54,5,26,64,91,50,45,71,6,30,67,48,69,82,8,56,80,67,18,46,66,63,1,20,8,80,47,7,91,16,3,79,87],
// [18,54,78,49,80,48,77,40,68,23,60,88,58,80,33,57,11,69,55,53,64,2,94,49,60,92,16,35,81,21,82,96,25,24,96,18,2,5,49,3,50,77,6,32,84,27,18,38],
// [68,1,50,4,3,21,42,94,53,24,89,5,92,26,52,36,68,11,85,1,4,42,2,45,15,6,50,4,53,73,25,74,81,88,98,21,67,84,79,97,99,20,95,4,40,46,2,58,87],
// [94,10,2,78,88,52,21,3,88,60,6,53,49,71,20,91,12,65,7,49,21,22,11,41,58,99,36,16,9,48,17,24,52,36,23,15,72,16,84,56,2,99,43,76,81,71,29,39,49,17],
// [64,39,59,84,86,16,17,66,3,9,43,6,64,18,63,29,68,6,23,7,87,14,26,35,17,12,98,41,53,64,78,18,98,27,28,84,80,67,75,62,10,11,76,90,54,10,5,54,41,39,66],
// [43,83,18,37,32,31,52,29,95,47,8,76,35,11,4,53,35,43,34,10,52,57,12,36,20,39,40,55,78,44,7,31,38,26,8,15,56,88,86,1,52,62,10,24,32,5,60,65,53,28,57,99],
// [3,50,3,52,7,73,49,92,66,80,1,46,8,67,25,36,73,93,7,42,25,53,13,96,76,83,87,90,54,89,78,22,78,91,73,51,69,9,79,94,83,53,9,40,69,62,10,79,49,47,3,81,30],
// [71,54,73,33,51,76,59,54,79,37,56,45,84,17,62,21,98,69,41,95,65,24,39,37,62,3,24,48,54,64,46,82,71,78,33,67,9,16,96,68,52,74,79,68,32,21,13,78,96,60,9,69,20,36],
// [73,26,21,44,46,38,17,83,65,98,7,23,52,46,61,97,33,13,60,31,70,15,36,77,31,58,56,93,75,68,21,36,69,53,90,75,25,82,39,50,65,94,29,30,11,33,11,13,96,2,56,47,7,49,2],
// [76,46,73,30,10,20,60,70,14,56,34,26,37,39,48,24,55,76,84,91,39,86,95,61,50,14,53,93,64,67,37,31,10,84,42,70,48,20,10,72,60,61,84,79,69,65,99,73,89,25,85,48,92,56,97,16],
// [3,14,80,27,22,30,44,27,67,75,79,32,51,54,81,29,65,14,19,4,13,82,4,91,43,40,12,52,29,99,7,76,60,25,1,7,61,71,37,92,40,47,99,66,57,1,43,44,22,40,53,53,9,69,26,81,7],
// [49,80,56,90,93,87,47,13,75,28,87,23,72,79,32,18,27,20,28,10,37,59,21,18,70,4,79,96,3,31,45,71,81,6,14,18,17,5,31,50,92,79,23,47,9,39,47,91,43,54,69,47,42,95,62,46,32,85],
// [37,18,62,85,87,28,64,5,77,51,47,26,30,65,5,70,65,75,59,80,42,52,25,20,44,10,92,17,71,95,52,14,77,13,24,55,11,65,26,91,1,30,63,15,49,48,41,17,67,47,3,68,20,90,98,32,4,40,68],
// [90,51,58,60,6,55,23,68,5,19,76,94,82,36,96,43,38,90,87,28,33,83,5,17,70,83,96,93,6,4,78,47,80,6,23,84,75,23,87,72,99,14,50,98,92,38,90,64,61,58,76,94,36,66,87,80,51,35,61,38],
// [57,95,64,6,53,36,82,51,40,33,47,14,7,98,78,65,39,58,53,6,50,53,4,69,40,68,36,69,75,78,75,60,3,32,39,24,74,47,26,90,13,40,44,71,90,76,51,24,36,50,25,45,70,80,61,80,61,43,90,64,11],
// [18,29,86,56,68,42,79,10,42,44,30,12,96,18,23,18,52,59,2,99,67,46,60,86,43,38,55,17,44,93,42,21,55,14,47,34,55,16,49,24,23,29,96,51,55,10,46,53,27,92,27,46,63,57,30,65,43,27,21,20,24,83],
// [81,72,93,19,69,52,48,1,13,83,92,69,20,48,69,59,20,62,5,42,28,89,90,99,32,72,84,17,8,87,36,3,60,31,36,36,81,26,97,36,48,54,56,56,27,16,91,8,23,11,87,99,33,47,2,14,44,73,70,99,43,35,33],
// [90,56,61,86,56,12,70,59,63,32,1,15,81,47,71,76,95,32,65,80,54,70,34,51,40,45,33,4,64,55,78,68,88,47,31,47,68,87,3,84,23,44,89,72,35,8,31,76,63,26,90,85,96,67,65,91,19,14,17,86,4,71,32,95],
// [37,13,4,22,64,37,37,28,56,62,86,33,7,37,10,44,52,82,52,6,19,52,57,75,90,26,91,24,6,21,14,67,76,30,46,14,35,89,89,41,3,64,56,97,87,63,22,34,3,79,17,45,11,53,25,56,96,61,23,18,63,31,37,37,47],
// [77,23,26,70,72,76,77,4,28,64,71,69,14,85,96,54,95,48,6,62,99,83,86,77,97,75,71,66,30,19,57,90,33,1,60,61,14,12,90,99,32,77,56,41,18,14,87,49,10,14,90,64,18,50,21,74,14,16,88,5,45,73,82,47,74,44],
// [22,97,41,13,34,31,54,61,56,94,3,24,59,27,98,77,4,9,37,40,12,26,87,9,71,70,7,18,64,57,80,21,12,71,83,94,60,39,73,79,73,19,97,32,64,29,41,7,48,84,85,67,12,74,95,20,24,52,41,67,56,61,29,93,35,72,69],
// [72,23,63,66,1,11,7,30,52,56,95,16,65,26,83,90,50,74,60,18,16,48,43,77,37,11,99,98,30,94,91,26,62,73,45,12,87,73,47,27,1,88,66,99,21,41,95,80,2,53,23,32,61,48,32,43,43,83,14,66,95,91,19,81,80,67,25,88],
// [8,62,32,18,92,14,83,71,37,96,11,83,39,99,5,16,23,27,10,67,2,25,44,11,55,31,46,64,41,56,44,74,26,81,51,31,45,85,87,9,81,95,22,28,76,69,46,48,64,87,67,76,27,89,31,11,74,16,62,3,60,94,42,47,9,34,94,93,72],
// [56,18,90,18,42,17,42,32,14,86,6,53,33,95,99,35,29,15,44,20,49,59,25,54,34,59,84,21,23,54,35,90,78,16,93,13,37,88,54,19,86,67,68,55,66,84,65,42,98,37,87,56,33,28,58,38,28,38,66,27,52,21,81,15,8,22,97,32,85,27],
// [91,53,40,28,13,34,91,25,1,63,50,37,22,49,71,58,32,28,30,18,68,94,23,83,63,62,94,76,80,41,90,22,82,52,29,12,18,56,10,8,35,14,37,57,23,65,67,40,72,39,93,39,70,89,40,34,7,46,94,22,20,5,53,64,56,30,5,56,61,88,27],
// [23,95,11,12,37,69,68,24,66,10,87,70,43,50,75,7,62,41,83,58,95,93,89,79,45,39,2,22,5,22,95,43,62,11,68,29,17,40,26,44,25,71,87,16,70,85,19,25,59,94,90,41,41,80,61,70,55,60,84,33,95,76,42,63,15,9,3,40,38,12,3,32],
// [9,84,56,80,61,55,85,97,16,94,82,94,98,57,84,30,84,48,93,90,71,5,95,90,73,17,30,98,40,64,65,89,7,79,9,19,56,36,42,30,23,69,73,72,7,5,27,61,24,31,43,48,71,84,21,28,26,65,65,59,65,74,77,20,10,81,61,84,95,8,52,23,70],
// [47,81,28,9,98,51,67,64,35,51,59,36,92,82,77,65,80,24,72,53,22,7,27,10,21,28,30,22,48,82,80,48,56,20,14,43,18,25,50,95,90,31,77,8,9,48,44,80,90,22,93,45,82,17,13,96,25,26,8,73,34,99,6,49,24,6,83,51,40,14,15,10,25,1],
// [54,25,10,81,30,64,24,74,75,80,36,75,82,60,22,69,72,91,45,67,3,62,79,54,89,74,44,83,64,96,66,73,44,30,74,50,37,5,9,97,70,1,60,46,37,91,39,75,75,18,58,52,72,78,51,81,86,52,8,97,1,46,43,66,98,62,81,18,70,93,73,8,32,46,34],
// [96,80,82,7,59,71,92,53,19,20,88,66,3,26,26,10,24,27,50,82,94,73,63,8,51,33,22,45,19,13,58,33,90,15,22,50,36,13,55,6,35,47,82,52,33,61,36,27,28,46,98,14,73,20,73,32,16,26,80,53,47,66,76,38,94,45,2,1,22,52,47,96,64,58,52,39],
// [88,46,23,39,74,63,81,64,20,90,33,33,76,55,58,26,10,46,42,26,74,74,12,83,32,43,9,2,73,55,86,54,85,34,28,23,29,79,91,62,47,41,82,87,99,22,48,90,20,5,96,75,95,4,43,28,81,39,81,1,28,42,78,25,39,77,90,57,58,98,17,36,73,22,63,74,51],
// [29,39,74,94,95,78,64,24,38,86,63,87,93,6,70,92,22,16,80,64,29,52,20,27,23,50,14,13,87,15,72,96,81,22,8,49,72,30,70,24,79,31,16,64,59,21,89,34,96,91,48,76,43,53,88,1,57,80,23,81,90,79,58,1,80,87,17,99,86,90,72,63,32,69,14,28,88,69],
// [37,17,71,95,56,93,71,35,43,45,4,98,92,94,84,96,11,30,31,27,31,60,92,3,48,5,98,91,86,94,35,90,90,8,48,19,33,28,68,37,59,26,65,96,50,68,22,7,9,49,34,31,77,49,43,6,75,17,81,87,61,79,52,26,27,72,29,50,7,98,86,1,17,10,46,64,24,18,56],
// [51,30,25,94,88,85,79,91,40,33,63,84,49,67,98,92,15,26,75,19,82,5,18,78,65,93,61,48,91,43,59,41,70,51,22,15,92,81,67,91,46,98,11,11,65,31,66,10,98,65,83,21,5,56,5,98,73,67,46,74,69,34,8,30,5,52,7,98,32,95,30,94,65,50,24,63,28,81,99,57],
// [19,23,61,36,9,89,71,98,65,17,30,29,89,26,79,74,94,11,44,48,97,54,81,55,39,66,69,45,28,47,13,86,15,76,74,70,84,32,36,33,79,20,78,14,41,47,89,28,81,5,99,66,81,86,38,26,6,25,13,60,54,55,23,53,27,5,89,25,23,11,13,54,59,54,56,34,16,24,53,44,6],
// [13,40,57,72,21,15,60,8,4,19,11,98,34,45,9,97,86,71,3,15,56,19,15,44,97,31,90,4,87,87,76,8,12,30,24,62,84,28,12,85,82,53,99,52,13,94,6,65,97,86,9,50,94,68,69,74,30,67,87,94,63,7,78,27,80,36,69,41,6,92,32,78,37,82,30,5,18,87,99,72,19,99],
// [44,20,55,77,69,91,27,31,28,81,80,27,2,7,97,23,95,98,12,25,75,29,47,71,7,47,78,39,41,59,27,76,13,15,66,61,68,35,69,86,16,53,67,63,99,85,41,56,8,28,33,40,94,76,90,85,31,70,24,65,84,65,99,82,19,25,54,37,21,46,33,2,52,99,51,33,26,4,87,2,8,18,96],
// [54,42,61,45,91,6,64,79,80,82,32,16,83,63,42,49,19,78,65,97,40,42,14,61,49,34,4,18,25,98,59,30,82,72,26,88,54,36,21,75,3,88,99,53,46,51,55,78,22,94,34,40,68,87,84,25,30,76,25,8,92,84,42,61,40,38,9,99,40,23,29,39,46,55,10,90,35,84,56,70,63,23,91,39],
// [52,92,3,71,89,7,9,37,68,66,58,20,44,92,51,56,13,71,79,99,26,37,2,6,16,67,36,52,58,16,79,73,56,60,59,27,44,77,94,82,20,50,98,33,9,87,94,37,40,83,64,83,58,85,17,76,53,2,83,52,22,27,39,20,48,92,45,21,9,42,24,23,12,37,52,28,50,78,79,20,86,62,73,20,59],
// [54,96,80,15,91,90,99,70,10,9,58,90,93,50,81,99,54,38,36,10,30,11,35,84,16,45,82,18,11,97,36,43,96,79,97,65,40,48,23,19,17,31,64,52,65,65,37,32,65,76,99,79,34,65,79,27,55,33,3,1,33,27,61,28,66,8,4,70,49,46,48,83,1,45,19,96,13,81,14,21,31,79,93,85,50,5],
// [92,92,48,84,59,98,31,53,23,27,15,22,79,95,24,76,5,79,16,93,97,89,38,89,42,83,2,88,94,95,82,21,1,97,48,39,31,78,9,65,50,56,97,61,1,7,65,27,21,23,14,15,80,97,44,78,49,35,33,45,81,74,34,5,31,57,9,38,94,7,69,54,69,32,65,68,46,68,78,90,24,28,49,51,45,86,35],
// [41,63,89,76,87,31,86,9,46,14,87,82,22,29,47,16,13,10,70,72,82,95,48,64,58,43,13,75,42,69,21,12,67,13,64,85,58,23,98,9,37,76,5,22,31,12,66,50,29,99,86,72,45,25,10,28,19,6,90,43,29,31,67,79,46,25,74,14,97,35,76,37,65,46,23,82,6,22,30,76,93,66,94,17,96,13,20,72],
// [63,40,78,8,52,9,90,41,70,28,36,14,46,44,85,96,24,52,58,15,87,37,5,98,99,39,13,61,76,38,44,99,83,74,90,22,53,80,56,98,30,51,63,39,44,30,91,91,4,22,27,73,17,35,53,18,35,45,54,56,27,78,48,13,69,36,44,38,71,25,30,56,15,22,73,43,32,69,59,25,93,83,45,11,34,94,44,39,92],
// [12,36,56,88,13,96,16,12,55,54,11,47,19,78,17,17,68,81,77,51,42,55,99,85,66,27,81,79,93,42,65,61,69,74,14,1,18,56,12,1,58,37,91,22,42,66,83,25,19,4,96,41,25,45,18,69,96,88,36,93,10,12,98,32,44,83,83,4,72,91,4,27,73,7,34,37,71,60,59,31,1,54,54,44,96,93,83,36,4,45],
// [30,18,22,20,42,96,65,79,17,41,55,69,94,81,29,80,91,31,85,25,47,26,43,49,2,99,34,67,99,76,16,14,15,93,8,32,99,44,61,77,67,50,43,55,87,55,53,72,17,46,62,25,50,99,73,5,93,48,17,31,70,80,59,9,44,59,45,13,74,66,58,94,87,73,16,14,85,38,74,99,64,23,79,28,71,42,20,37,82,31,23],
// [51,96,39,65,46,71,56,13,29,68,53,86,45,33,51,49,12,91,21,21,76,85,2,17,98,15,46,12,60,21,88,30,92,83,44,59,42,50,27,88,46,86,94,73,45,54,23,24,14,10,94,21,20,34,23,51,4,83,99,75,90,63,60,16,22,33,83,70,11,32,10,50,29,30,83,46,11,5,31,17,86,42,49,1,44,63,28,60,7,78,95,40],
// [44,61,89,59,4,49,51,27,69,71,46,76,44,4,9,34,56,39,15,6,94,91,75,90,65,27,56,23,74,6,23,33,36,69,14,39,5,34,35,57,33,22,76,46,56,10,61,65,98,9,16,69,4,62,65,18,99,76,49,18,72,66,73,83,82,40,76,31,89,91,27,88,17,35,41,35,32,51,32,67,52,68,74,85,80,57,7,11,62,66,47,22,67],
// [65,37,19,97,26,17,16,24,24,17,50,37,64,82,24,36,32,11,68,34,69,31,32,89,79,93,96,68,49,90,14,23,4,4,67,99,81,74,70,74,36,96,68,9,64,39,88,35,54,89,96,58,66,27,88,97,32,14,6,35,78,20,71,6,85,66,57,2,58,91,72,5,29,56,73,48,86,52,9,93,22,57,79,42,12,1,31,68,17,59,63,76,7,77],
// [73,81,14,13,17,20,11,9,1,83,8,85,91,70,84,63,62,77,37,7,47,1,59,95,39,69,39,21,99,9,87,2,97,16,92,36,74,71,90,66,33,73,73,75,52,91,11,12,26,53,5,26,26,48,61,50,90,65,1,87,42,47,74,35,22,73,24,26,56,70,52,5,48,41,31,18,83,27,21,39,80,85,26,8,44,2,71,7,63,22,5,52,19,8,20],
// [17,25,21,11,72,93,33,49,64,23,53,82,3,13,91,65,85,2,40,5,42,31,77,42,5,36,6,54,4,58,7,76,87,83,25,57,66,12,74,33,85,37,74,32,20,69,3,97,91,68,82,44,19,14,89,28,85,85,80,53,34,87,58,98,88,78,48,65,98,40,11,57,10,67,70,81,60,79,74,72,97,59,79,47,30,20,54,80,89,91,14,5,33,36,79,39],
// [60,85,59,39,60,7,57,76,77,92,6,35,15,72,23,41,45,52,95,18,64,79,86,53,56,31,69,11,91,31,84,50,44,82,22,81,41,40,30,42,30,91,48,94,74,76,64,58,74,25,96,57,14,19,3,99,28,83,15,75,99,1,89,85,79,50,3,95,32,67,44,8,7,41,62,64,29,20,14,76,26,55,48,71,69,66,19,72,44,25,14,1,48,74,12,98,7],
// [64,66,84,24,18,16,27,48,20,14,47,69,30,86,48,40,23,16,61,21,51,50,26,47,35,33,91,28,78,64,43,68,4,79,51,8,19,60,52,95,6,68,46,86,35,97,27,58,4,65,30,58,99,12,12,75,91,39,50,31,42,64,70,4,46,7,98,73,98,93,37,89,77,91,64,71,64,65,66,21,78,62,81,74,42,20,83,70,73,95,78,45,92,27,34,53,71,15],
// [30,11,85,31,34,71,13,48,5,14,44,3,19,67,23,73,19,57,6,90,94,72,57,69,81,62,59,68,88,57,55,69,49,13,7,87,97,80,89,5,71,5,5,26,38,40,16,62,45,99,18,38,98,24,21,26,62,74,69,4,85,57,77,35,58,67,91,79,79,57,86,28,66,34,72,51,76,78,36,95,63,90,8,78,47,63,45,31,22,70,52,48,79,94,15,77,61,67,68],
// [23,33,44,81,80,92,93,75,94,88,23,61,39,76,22,3,28,94,32,6,49,65,41,34,18,23,8,47,62,60,3,63,33,13,80,52,31,54,73,43,70,26,16,69,57,87,83,31,3,93,70,81,47,95,77,44,29,68,39,51,56,59,63,7,25,70,7,77,43,53,64,3,94,42,95,39,18,1,66,21,16,97,20,50,90,16,70,10,95,69,29,6,25,61,41,26,15,59,63,35]];

// let start = performance.now();
// console.log(findPathwithMemo(0,0,bigPyramid));
// let end = performance.now();
// console.log(end-start);


// // 19 Problem ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// // Counting Sundays
// // You are given the following information, but you may prefer to do some research for yourself.

// // 1 Jan 1900 was a Monday.
// // Thirty days has September,
// // April, June and November.
// // All the rest have thirty-one,
// // Saving February alone,
// // Which has twenty-eight, rain or shine.
// // And on leap years, twenty-nine.
// // A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
// // How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?

// function solution() {
//     var n = 0;
//     for (var y = 1901; y <= 2000; y++) {
//       for (var m = 0; m < 12; m++) {
//         if (new Date(y, m, 1).getDay() === 0) {
//           n++;
//         }
//       }
//     }
//     return n;
//   }

//   function solution2() {

//     var n = 0, dow = 2;
//     var months = [31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

//     for (var y = 1901; y <= 2000; y++) {

//       months[1] = 28 + (y % 4 === 0 && y % 100 !== 0 || y % 400 === 0);

//       for (var month of months) {
//         dow+= month % 7;
//         if (dow % 7 === 0) {
//           n++;
//         }
//       }
//     }
//     return n;
//   }

//   console.log(solution2());

// 20 Problem+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Factorial Digit Sum
/* <p>$n!$ means $n \times (n - 1) \times \cdots \times 3 \times 2 \times 1$.</p>
<p>For example, $10! = 10 \times 9 \times \cdots \times 3 \times 2 \times 1 = 3628800$,<br>and the sum of the digits in the number $10!$ is $3 + 6 + 2 + 8 + 8 + 0 + 0 = 27$.</p>
<p>Find the sum of the digits in the number $100!$.</p> */

// function sumBigNum(arr) {
//     let memory = 0;
//     let sum = '';
//     let maxnumdigits = 0;
//     for (el of arr) {
//         if (el.length > maxnumdigits) maxnumdigits = el.length;
//     }
//     const buildarr = arr.map((el) => {
//         while (el.length != maxnumdigits) { el = '0' + el; }
//         return el;
//     });
//     for (let i = maxnumdigits - 1; i >= 0; i--) {
//         for (let j = 0; j < buildarr.length; j++) {
//             memory += +buildarr[j][i];
//             if (j === buildarr.length - 1) {
//                 let char = memory.toString();
//                 let suffix = char.slice(-1);
//                 sum = [suffix, sum].join('');
//                 prefix = char.slice(0, -1);
//                 memory = +prefix;
//             }
//         }
//     }
//     if (memory != 0) sum = memory.toString() + sum;
//     return sum;
// }


// function multiplyBigNum(n1, n2) {
//     let arr_product = [];
//     let memory1 = 0;
//     let memory2 = '';
//     for (let i = n2.length - 1; i >= 0; i--) {
//         for (let j = n1.length - 1; j >= 0; j--) {
//             let product = +(n2[i]) * (+n1[j]) + memory1;
//             let midresult = product.toString();
//             if (j === 0) {
//                 memory2 = [midresult, memory2].join('');
//             } else {
//                 memory2 = [midresult.slice(-1), memory2].join('');
//             }
//             memory1 = +midresult.slice(0, -1);
//            }
//         arr_product.push(memory2);
//         memory1 = 0;
//         memory2 = '';
//     }
//     // add to lower digit a zero before addition;
//     let times = 1;
//     for (let i = 1; i < arr_product.length; i++) {
//         let checktimes = times;
//         while (checktimes > 0) {
//             arr_product[i] = arr_product[i] + '0';
//             checktimes--;
//         }
//         times++;
//     }
//     let res = sumBigNum(arr_product);
//     return res;
// }

// function fact(number) {
//     let result = 1;
//     for(let i=2; i<=number; i++) {
//         result = result * i;
//     }
//     return result;
// }

// function sumFactorialNumber(number) {
//     let sumnumber = 0;
//     let result = '1';
//     for(let i=2; i<=number; i++) {
//         result = multiplyBigNum(result, i.toString())
//     }
//     for(let i = 0; i<result.length; i++) {
//         sumnumber = sumnumber + parseInt(result[i]);
//     }
//     return sumnumber;
// }

// console.log(fact(10)); //648 V

// 21 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Amicable Numbers
/* <p>Let $d(n)$ be defined as the sum of proper divisors of $n$ (numbers less than $n$ which divide evenly into $n$).<br>
If $d(a) = b$ and $d(b) = a$, where $a \ne b$, then $a$ and $b$ are an amicable pair and each of $a$ and $b$ are called amicable numbers.</p>
<p>For example, the proper divisors of $220$ are $1, 2, 4, 5, 10, 11, 20, 22, 44, 55$ and $110$; therefore $d(220) = 284$. The proper divisors of $284$ are $1, 2, 4, 71$ and $142$; so $d(284) = 220$.</p>
<p>Evaluate the sum of all the amicable numbers under $10000$.</p> */

// function factortoArray(n) {
//     let arr = [1];
//     for (let i = 2; i < Math.sqrt(n); i++) {
//         if (n % i === 0) {
//             arr.push(i);
//             arr.push(n / i);
//         }
//     }
//     arr.push(n);
//     return arr;
// }

// function properDevisorstoArray(n) {
//     let arr = [1];
//     for (let i = 2; i < Math.sqrt(n); i++) {
//         if (n % i === 0) {
//             arr.push(i);
//             arr.push(n / i);
//         }
//     }
//     return arr;
// }


// function findSumOfAmicable() {

//     let set = new Set();
//     let sum = 0;

//     for (let i = 2;i<=10000; i++) {
//         if(set.has(i)) continue;
//         let arr = properDevisorstoArray(i);
//         let conj = arr.reduce((acc,elem)=>acc+elem);

//         if(conj>10000) continue;
//         let conjfactors = properDevisorstoArray(conj);
//         let countconjfact = conjfactors.reduce((acc,elem)=>acc+elem);
//         if(countconjfact==i && conj != i) {set.add(i); set.add(conj); console.log(i,conj);};
//     }
//     console.log(set);
//     let iter = set.keys();
//     let elem = iter.next().value;
//     while(elem) {
//         sum += elem;
//         elem=iter.next().value;
//     }
//     return sum;
// }

// console.log(findSumOfAmicable()); // 31626 V

// 22 Problem+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Names Scores
// let str = ["MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY","LISA",
// "NANCY","KAREN","BETTY","HELEN","SANDRA","DONNA","CAROL","RUTH","SHARON","MICHELLE","LAURA","SARAH","KIMBERLY",
// "DEBORAH","JESSICA","SHIRLEY","CYNTHIA","ANGELA","MELISSA","BRENDA","AMY","ANNA","REBECCA","VIRGINIA","KATHLEEN",
// "PAMELA","MARTHA","DEBRA","AMANDA","STEPHANIE","CAROLYN","CHRISTINE","MARIE","JANET","CATHERINE","FRANCES","ANN",
// "JOYCE","DIANE","ALICE","JULIE","HEATHER","TERESA","DORIS","GLORIA","EVELYN","JEAN","CHERYL","MILDRED","KATHERINE",
// "JOAN","ASHLEY","JUDITH","ROSE","JANICE","KELLY","NICOLE","JUDY","CHRISTINA","KATHY","THERESA","BEVERLY","DENISE",
// "TAMMY","IRENE","JANE","LORI","RACHEL","MARILYN","ANDREA","KATHRYN","LOUISE","SARA","ANNE","JACQUELINE","WANDA",
// "BONNIE","JULIA","RUBY","LOIS","TINA","PHYLLIS","NORMA","PAULA","DIANA","ANNIE","LILLIAN","EMILY","ROBIN","PEGGY",
// "CRYSTAL","GLADYS","RITA","DAWN","CONNIE","FLORENCE","TRACY","EDNA","TIFFANY","CARMEN","ROSA","CINDY","GRACE","WENDY",
// "VICTORIA","EDITH","KIM","SHERRY","SYLVIA","JOSEPHINE","THELMA","SHANNON","SHEILA","ETHEL","ELLEN","ELAINE","MARJORIE",
// "CARRIE","CHARLOTTE","MONICA","ESTHER","PAULINE","EMMA","JUANITA","ANITA","RHONDA","HAZEL","AMBER","EVA","DEBBIE","APRIL",
// "LESLIE","CLARA","LUCILLE","JAMIE","JOANNE","ELEANOR","VALERIE","DANIELLE","MEGAN","ALICIA","SUZANNE","MICHELE","GAIL","BERTHA",
// "DARLENE","VERONICA","JILL","ERIN","GERALDINE","LAUREN","CATHY","JOANN","LORRAINE","LYNN","SALLY","REGINA","ERICA","BEATRICE",
// "DOLORES","BERNICE","AUDREY","YVONNE","ANNETTE","JUNE","SAMANTHA","MARION","DANA","STACY","ANA","RENEE","IDA","VIVIAN","ROBERTA",
// "HOLLY","BRITTANY","MELANIE","LORETTA","YOLANDA","JEANETTE","LAURIE","KATIE","KRISTEN","VANESSA","ALMA","SUE","ELSIE","BETH",
// "JEANNE","VICKI","CARLA","TARA","ROSEMARY","EILEEN","TERRI","GERTRUDE","LUCY","TONYA","ELLA","STACEY","WILMA","GINA","KRISTIN",
// "JESSIE","NATALIE","AGNES","VERA","WILLIE","CHARLENE","BESSIE","DELORES","MELINDA","PEARL","ARLENE","MAUREEN","COLLEEN","ALLISON",
// "TAMARA","JOY","GEORGIA","CONSTANCE","LILLIE","CLAUDIA","JACKIE","MARCIA","TANYA","NELLIE","MINNIE","MARLENE","HEIDI","GLENDA",
// "LYDIA","VIOLA","COURTNEY","MARIAN","STELLA","CAROLINE","DORA","JO","VICKIE","MATTIE","TERRY","MAXINE","IRMA","MABEL","MARSHA",
// "MYRTLE","LENA","CHRISTY","DEANNA","PATSY","HILDA","GWENDOLYN","JENNIE","NORA","MARGIE","NINA","CASSANDRA","LEAH","PENNY","KAY",
// "PRISCILLA","NAOMI","CAROLE","BRANDY","OLGA","BILLIE","DIANNE","TRACEY","LEONA","JENNY","FELICIA","SONIA","MIRIAM","VELMA","BECKY",
// "BOBBIE","VIOLET","KRISTINA","TONI","MISTY","MAE","SHELLY","DAISY","RAMONA","SHERRI","ERIKA","KATRINA","CLAIRE","LINDSEY","LINDSAY",
// "GENEVA","GUADALUPE","BELINDA","MARGARITA","SHERYL","CORA","FAYE","ADA","NATASHA","SABRINA","ISABEL","MARGUERITE","HATTIE","HARRIET",
// "MOLLY","CECILIA","KRISTI","BRANDI","BLANCHE","SANDY","ROSIE","JOANNA","IRIS","EUNICE","ANGIE","INEZ","LYNDA","MADELINE","AMELIA",
// "ALBERTA","GENEVIEVE","MONIQUE","JODI","JANIE","MAGGIE","KAYLA","SONYA","JAN","LEE","KRISTINE","CANDACE","FANNIE","MARYANN","OPAL",
// "ALISON","YVETTE","MELODY","LUZ","SUSIE","OLIVIA","FLORA","SHELLEY","KRISTY","MAMIE","LULA","LOLA","VERNA","BEULAH","ANTOINETTE",
// "CANDICE","JUANA","JEANNETTE","PAM","KELLI","HANNAH","WHITNEY","BRIDGET","KARLA","CELIA","LATOYA","PATTY","SHELIA","GAYLE","DELLA",
// "VICKY","LYNNE","SHERI","MARIANNE","KARA","JACQUELYN","ERMA","BLANCA","MYRA","LETICIA","PAT","KRISTA","ROXANNE","ANGELICA","JOHNNIE",
// "ROBYN","FRANCIS","ADRIENNE","ROSALIE","ALEXANDRA","BROOKE","BETHANY","SADIE","BERNADETTE","TRACI","JODY","KENDRA","JASMINE","NICHOLE",
// "RACHAEL","CHELSEA","MABLE","ERNESTINE","MURIEL","MARCELLA","ELENA","KRYSTAL","ANGELINA","NADINE","KARI","ESTELLE","DIANNA","PAULETTE",
// "LORA","MONA","DOREEN","ROSEMARIE","ANGEL","DESIREE","ANTONIA","HOPE","GINGER","JANIS","BETSY","CHRISTIE","FREDA","MERCEDES","MEREDITH",
// "LYNETTE","TERI","CRISTINA","EULA","LEIGH","MEGHAN","SOPHIA","ELOISE","ROCHELLE","GRETCHEN","CECELIA","RAQUEL","HENRIETTA","ALYSSA","JANA",
// "KELLEY","GWEN","KERRY","JENNA","TRICIA","LAVERNE","OLIVE","ALEXIS","TASHA","SILVIA","ELVIRA","CASEY","DELIA","SOPHIE","KATE","PATTI","LORENA",
// "KELLIE","SONJA","LILA","LANA","DARLA","MAY","MINDY","ESSIE","MANDY","LORENE","ELSA","JOSEFINA","JEANNIE","MIRANDA","DIXIE","LUCIA","MARTA",
// "FAITH","LELA","JOHANNA","SHARI","CAMILLE","TAMI","SHAWNA","ELISA","EBONY","MELBA","ORA","NETTIE","TABITHA","OLLIE","JAIME","WINIFRED","KRISTIE",
// "MARINA","ALISHA","AIMEE","RENA","MYRNA","MARLA","TAMMIE","LATASHA","BONITA","PATRICE","RONDA","SHERRIE","ADDIE","FRANCINE","DELORIS","STACIE",
// "ADRIANA","CHERI","SHELBY","ABIGAIL","CELESTE","JEWEL","CARA","ADELE","REBEKAH","LUCINDA","DORTHY","CHRIS","EFFIE","TRINA","REBA","SHAWN","SALLIE",
// "AURORA","LENORA","ETTA","LOTTIE","KERRI","TRISHA","NIKKI","ESTELLA","FRANCISCA","JOSIE","TRACIE","MARISSA","KARIN","BRITTNEY","JANELLE","LOURDES",
// "LAUREL","HELENE","FERN","ELVA","CORINNE","KELSEY","INA","BETTIE","ELISABETH","AIDA","CAITLIN","INGRID","IVA","EUGENIA","CHRISTA","GOLDIE","CASSIE",
// "MAUDE","JENIFER","THERESE","FRANKIE","DENA","LORNA","JANETTE","LATONYA","CANDY","MORGAN","CONSUELO","TAMIKA","ROSETTA","DEBORA","CHERIE","POLLY",
// "DINA","JEWELL","FAY","JILLIAN","DOROTHEA","NELL","TRUDY","ESPERANZA","PATRICA","KIMBERLEY","SHANNA","HELENA","CAROLINA","CLEO","STEFANIE","ROSARIO",
// "OLA","JANINE","MOLLIE","LUPE","ALISA","LOU","MARIBEL","SUSANNE","BETTE","SUSANA","ELISE","CECILE","ISABELLE","LESLEY","JOCELYN","PAIGE","JONI",
// "RACHELLE","LEOLA","DAPHNE","ALTA","ESTER","PETRA","GRACIELA","IMOGENE","JOLENE","KEISHA","LACEY","GLENNA","GABRIELA","KERI","URSULA","LIZZIE",
// "KIRSTEN","SHANA","ADELINE","MAYRA","JAYNE","JACLYN","GRACIE","SONDRA","CARMELA","MARISA","ROSALIND","CHARITY","TONIA","BEATRIZ","MARISOL","CLARICE",
// "JEANINE","SHEENA","ANGELINE","FRIEDA","LILY","ROBBIE","SHAUNA","MILLIE","CLAUDETTE","CATHLEEN","ANGELIA","GABRIELLE","AUTUMN","KATHARINE","SUMMER",
// "JODIE","STACI","LEA","CHRISTI","JIMMIE","JUSTINE","ELMA","LUELLA","MARGRET","DOMINIQUE","SOCORRO","RENE","MARTINA","MARGO","MAVIS","CALLIE","BOBBI",
// "MARITZA","LUCILE","LEANNE","JEANNINE","DEANA","AILEEN","LORIE","LADONNA","WILLA","MANUELA","GALE","SELMA","DOLLY","SYBIL","ABBY","LARA","DALE","IVY",
// "DEE","WINNIE","MARCY","LUISA","JERI","MAGDALENA","OFELIA","MEAGAN","AUDRA","MATILDA","LEILA","CORNELIA","BIANCA","SIMONE","BETTYE","RANDI","VIRGIE",
// "LATISHA","BARBRA","GEORGINA","ELIZA","LEANN","BRIDGETTE","RHODA","HALEY","ADELA","NOLA","BERNADINE","FLOSSIE","ILA","GRETA","RUTHIE","NELDA","MINERVA",
// "LILLY","TERRIE","LETHA","HILARY","ESTELA","VALARIE","BRIANNA","ROSALYN","EARLINE","CATALINA","AVA","MIA","CLARISSA","LIDIA","CORRINE","ALEXANDRIA",
// "CONCEPCION","TIA","SHARRON","RAE","DONA","ERICKA","JAMI","ELNORA","CHANDRA","LENORE","NEVA","MARYLOU","MELISA","TABATHA","SERENA","AVIS","ALLIE","SOFIA",
// "JEANIE","ODESSA","NANNIE","HARRIETT","LORAINE","PENELOPE","MILAGROS","EMILIA","BENITA","ALLYSON","ASHLEE","TANIA","TOMMIE","ESMERALDA","KARINA",
// "EVE","PEARLIE","ZELMA","MALINDA","NOREEN","TAMEKA","SAUNDRA","HILLARY","AMIE","ALTHEA","ROSALINDA","JORDAN","LILIA","ALANA","GAY","CLARE","ALEJANDRA",
// "ELINOR","MICHAEL","LORRIE","JERRI","DARCY","EARNESTINE","CARMELLA","TAYLOR","NOEMI","MARCIE","LIZA","ANNABELLE","LOUISA","EARLENE","MALLORY","CARLENE",
// "NITA","SELENA","TANISHA","KATY","JULIANNE","JOHN","LAKISHA","EDWINA","MARICELA","MARGERY","KENYA","DOLLIE","ROXIE","ROSLYN","KATHRINE","NANETTE","CHARMAINE",
// "LAVONNE","ILENE","KRIS","TAMMI","SUZETTE","CORINE","KAYE","JERRY","MERLE","CHRYSTAL","LINA","DEANNE","LILIAN","JULIANA","ALINE","LUANN","KASEY","MARYANNE",
// "EVANGELINE","COLETTE","MELVA","LAWANDA","YESENIA","NADIA","MADGE","KATHIE","EDDIE","OPHELIA","VALERIA","NONA","MITZI","MARI","GEORGETTE","CLAUDINE","FRAN",
// "ALISSA","ROSEANN","LAKEISHA","SUSANNA","REVA","DEIDRE","CHASITY","SHEREE","CARLY","JAMES","ELVIA","ALYCE","DEIRDRE","GENA","BRIANA","ARACELI","KATELYN",
// "ROSANNE","WENDI","TESSA","BERTA","MARVA","IMELDA","MARIETTA","MARCI","LEONOR","ARLINE","SASHA","MADELYN","JANNA","JULIETTE","DEENA","AURELIA","JOSEFA",
// "AUGUSTA","LILIANA","YOUNG","CHRISTIAN","LESSIE","AMALIA","SAVANNAH","ANASTASIA","VILMA","NATALIA","ROSELLA","LYNNETTE","CORINA","ALFREDA","LEANNA",
// "CAREY","AMPARO","COLEEN","TAMRA","AISHA","WILDA","KARYN","CHERRY","QUEEN","MAURA","MAI","EVANGELINA","ROSANNA","HALLIE","ERNA","ENID","MARIANA","LACY",
// "JULIET","JACKLYN","FREIDA","MADELEINE","MARA","HESTER","CATHRYN","LELIA","CASANDRA","BRIDGETT","ANGELITA","JANNIE","DIONNE","ANNMARIE","KATINA",
// "BERYL","PHOEBE","MILLICENT","KATHERYN","DIANN","CARISSA","MARYELLEN","LIZ","LAURI","HELGA","GILDA","ADRIAN","RHEA","MARQUITA","HOLLIE","TISHA",
// "TAMERA","ANGELIQUE","FRANCESCA","BRITNEY","KAITLIN","LOLITA","FLORINE","ROWENA","REYNA","TWILA","FANNY","JANELL","INES","CONCETTA","BERTIE","ALBA",
// "BRIGITTE","ALYSON","VONDA","PANSY","ELBA","NOELLE","LETITIA","KITTY","DEANN","BRANDIE","LOUELLA","LETA","FELECIA","SHARLENE","LESA","BEVERLEY",
// "ROBERT","ISABELLA","HERMINIA","TERRA","CELINA","TORI","OCTAVIA","JADE","DENICE","GERMAINE","SIERRA","MICHELL","CORTNEY","NELLY","DORETHA","SYDNEY",
// "DEIDRA","MONIKA","LASHONDA","JUDI","CHELSEY","ANTIONETTE","MARGOT","BOBBY","ADELAIDE","NAN","LEEANN","ELISHA","DESSIE","LIBBY","KATHI","GAYLA","LATANYA",
// "MINA","MELLISA","KIMBERLEE","JASMIN","RENAE","ZELDA","ELDA","MA","JUSTINA","GUSSIE","EMILIE","CAMILLA","ABBIE","ROCIO","KAITLYN","JESSE","EDYTHE",
// "ASHLEIGH","SELINA","LAKESHA","GERI","ALLENE","PAMALA","MICHAELA","DAYNA","CARYN","ROSALIA","SUN","JACQULINE","REBECA","MARYBETH","KRYSTLE","IOLA",
// "DOTTIE","BENNIE","BELLE","AUBREY","GRISELDA","ERNESTINA","ELIDA","ADRIANNE","DEMETRIA","DELMA","CHONG","JAQUELINE","DESTINY","ARLEEN","VIRGINA",
// "RETHA","FATIMA","TILLIE","ELEANORE","CARI","TREVA","BIRDIE","WILHELMINA","ROSALEE","MAURINE","LATRICE","YONG","JENA","TARYN","ELIA","DEBBY","MAUDIE",
// "JEANNA","DELILAH","CATRINA","SHONDA","HORTENCIA","THEODORA","TERESITA","ROBBIN","DANETTE","MARYJANE","FREDDIE","DELPHINE","BRIANNE","NILDA","DANNA",
// "CINDI","BESS","IONA","HANNA","ARIEL","WINONA","VIDA","ROSITA","MARIANNA","WILLIAM","RACHEAL","GUILLERMINA","ELOISA","CELESTINE","CAREN","MALISSA",
// "LONA","CHANTEL","SHELLIE","MARISELA","LEORA","AGATHA","SOLEDAD","MIGDALIA","IVETTE","CHRISTEN","ATHENA","JANEL","CHLOE","VEDA","PATTIE","TESSIE",
// "TERA","MARILYNN","LUCRETIA","KARRIE","DINAH","DANIELA","ALECIA","ADELINA","VERNICE","SHIELA","PORTIA","MERRY","LASHAWN","DEVON","DARA","TAWANA","OMA",
// "VERDA","CHRISTIN","ALENE","ZELLA","SANDI","RAFAELA","MAYA","KIRA","CANDIDA","ALVINA","SUZAN","SHAYLA","LYN","LETTIE","ALVA","SAMATHA","ORALIA","MATILDE",
// "MADONNA","LARISSA","VESTA","RENITA","INDIA","DELOIS","SHANDA","PHILLIS","LORRI","ERLINDA","CRUZ","CATHRINE","BARB","ZOE","ISABELL","IONE","GISELA","CHARLIE",
// "VALENCIA","ROXANNA","MAYME","KISHA","ELLIE","MELLISSA","DORRIS","DALIA","BELLA","ANNETTA","ZOILA","RETA","REINA","LAURETTA","KYLIE","CHRISTAL","PILAR","CHARLA",
// "ELISSA","TIFFANI","TANA","PAULINA","LEOTA","BREANNA","JAYME","CARMEL","VERNELL","TOMASA","MANDI","DOMINGA","SANTA","MELODIE","LURA","ALEXA","TAMELA","RYAN",
// "MIRNA","KERRIE","VENUS","NOEL","FELICITA","CRISTY","CARMELITA","BERNIECE","ANNEMARIE","TIARA","ROSEANNE","MISSY","CORI","ROXANA","PRICILLA","KRISTAL","JUNG",
// "ELYSE","HAYDEE","ALETHA","BETTINA","MARGE","GILLIAN","FILOMENA","CHARLES","ZENAIDA","HARRIETTE","CARIDAD","VADA","UNA","ARETHA","PEARLINE","MARJORY","MARCELA",
// "FLOR","EVETTE","ELOUISE","ALINA","TRINIDAD","DAVID","DAMARIS","CATHARINE","CARROLL","BELVA","NAKIA","MARLENA","LUANNE","LORINE","KARON","DORENE","DANITA",
// "BRENNA","TATIANA","SAMMIE","LOUANN","LOREN","JULIANNA","ANDRIA","PHILOMENA","LUCILA","LEONORA","DOVIE","ROMONA","MIMI","JACQUELIN","GAYE","TONJA","MISTI",
// "JOE","GENE","CHASTITY","STACIA","ROXANN","MICAELA","NIKITA","MEI","VELDA","MARLYS","JOHNNA","AURA","LAVERN","IVONNE","HAYLEY","NICKI","MAJORIE","HERLINDA",
// "GEORGE","ALPHA","YADIRA","PERLA","GREGORIA","DANIEL","ANTONETTE","SHELLI","MOZELLE","MARIAH","JOELLE","CORDELIA","JOSETTE","CHIQUITA","TRISTA","LOUIS",
// "LAQUITA","GEORGIANA","CANDI","SHANON","LONNIE","HILDEGARD","CECIL","VALENTINA","STEPHANY","MAGDA","KAROL","GERRY","GABRIELLA","TIANA","ROMA","RICHELLE",
// "RAY","PRINCESS","OLETA","JACQUE","IDELLA","ALAINA","SUZANNA","JOVITA","BLAIR","TOSHA","RAVEN","NEREIDA","MARLYN","KYLA","JOSEPH","DELFINA","TENA","STEPHENIE",
// "SABINA","NATHALIE","MARCELLE","GERTIE","DARLEEN","THEA","SHARONDA","SHANTEL","BELEN","VENESSA","ROSALINA","ONA","GENOVEVA","COREY","CLEMENTINE","ROSALBA",
// "RENATE","RENATA","MI","IVORY","GEORGIANNA","FLOY","DORCAS","ARIANA","TYRA","THEDA","MARIAM","JULI","JESICA","DONNIE","VIKKI","VERLA","ROSELYN","MELVINA",
// "JANNETTE","GINNY","DEBRAH","CORRIE","ASIA","VIOLETA","MYRTIS","LATRICIA","COLLETTE","CHARLEEN","ANISSA","VIVIANA","TWYLA","PRECIOUS","NEDRA","LATONIA","LAN",
// "HELLEN","FABIOLA","ANNAMARIE","ADELL","SHARYN","CHANTAL","NIKI","MAUD","LIZETTE","LINDY","KIA","KESHA","JEANA","DANELLE","CHARLINE","CHANEL","CARROL",
// "VALORIE","LIA","DORTHA","CRISTAL","SUNNY","LEONE","LEILANI","GERRI","DEBI","ANDRA","KESHIA","IMA","EULALIA","EASTER","DULCE","NATIVIDAD","LINNIE","KAMI",
// "GEORGIE","CATINA","BROOK","ALDA","WINNIFRED","SHARLA","RUTHANN","MEAGHAN","MAGDALENE","LISSETTE","ADELAIDA","VENITA","TRENA","SHIRLENE","SHAMEKA","ELIZEBETH",
// "DIAN","SHANTA","MICKEY","LATOSHA","CARLOTTA","WINDY","SOON","ROSINA","MARIANN","LEISA","JONNIE","DAWNA","CATHIE","BILLY","ASTRID","SIDNEY","LAUREEN","JANEEN",
// "HOLLI","FAWN","VICKEY","TERESSA","SHANTE","RUBYE","MARCELINA","CHANDA","CARY","TERESE","SCARLETT","MARTY","MARNIE","LULU","LISETTE","JENIFFER","ELENOR","DORINDA",
// "DONITA","CARMAN","BERNITA","ALTAGRACIA","ALETA","ADRIANNA","ZORAIDA","RONNIE","NICOLA","LYNDSEY","KENDALL","JANINA","CHRISSY","AMI","STARLA","PHYLIS","PHUONG",
// "KYRA","CHARISSE","BLANCH","SANJUANITA","RONA","NANCI","MARILEE","MARANDA","CORY","BRIGETTE","SANJUANA","MARITA","KASSANDRA","JOYCELYN","IRA","FELIPA","CHELSIE",
// "BONNY","MIREYA","LORENZA","KYONG","ILEANA","CANDELARIA","TONY","TOBY","SHERIE","OK","MARK","LUCIE","LEATRICE","LAKESHIA","GERDA","EDIE","BAMBI","MARYLIN","LAVON",
// "HORTENSE","GARNET","EVIE","TRESSA","SHAYNA","LAVINA","KYUNG","JEANETTA","SHERRILL","SHARA","PHYLISS","MITTIE","ANABEL","ALESIA","THUY","TAWANDA","RICHARD","JOANIE",
// "TIFFANIE","LASHANDA","KARISSA","ENRIQUETA","DARIA","DANIELLA","CORINNA","ALANNA","ABBEY","ROXANE","ROSEANNA","MAGNOLIA","LIDA","KYLE","JOELLEN","ERA","CORAL",
// "CARLEEN","TRESA","PEGGIE","NOVELLA","NILA","MAYBELLE","JENELLE","CARINA","NOVA","MELINA","MARQUERITE","MARGARETTE","JOSEPHINA","EVONNE","DEVIN","CINTHIA","ALBINA",
// "TOYA","TAWNYA","SHERITA","SANTOS","MYRIAM","LIZABETH","LISE","KEELY","JENNI","GISELLE","CHERYLE","ARDITH","ARDIS","ALESHA","ADRIANE","SHAINA","LINNEA","KAROLYN",
// "HONG","FLORIDA","FELISHA","DORI","DARCI","ARTIE","ARMIDA","ZOLA","XIOMARA","VERGIE","SHAMIKA","NENA","NANNETTE","MAXIE","LOVIE","JEANE","JAIMIE","INGE","FARRAH",
// "ELAINA","CAITLYN","STARR","FELICITAS","CHERLY","CARYL","YOLONDA","YASMIN","TEENA","PRUDENCE","PENNIE","NYDIA","MACKENZIE","ORPHA","MARVEL","LIZBETH","LAURETTE",
// "JERRIE","HERMELINDA","CAROLEE","TIERRA","MIRIAN","META","MELONY","KORI","JENNETTE","JAMILA","ENA","ANH","YOSHIKO","SUSANNAH","SALINA","RHIANNON","JOLEEN",
// "CRISTINE","ASHTON","ARACELY","TOMEKA","SHALONDA","MARTI","LACIE","KALA","JADA","ILSE","HAILEY","BRITTANI","ZONA","SYBLE","SHERRYL","RANDY","NIDIA","MARLO",
// "KANDICE","KANDI","DEB","DEAN","AMERICA","ALYCIA","TOMMY","RONNA","NORENE","MERCY","JOSE","INGEBORG","GIOVANNA","GEMMA","CHRISTEL","AUDRY","ZORA","VITA","VAN",
// "TRISH","STEPHAINE","SHIRLEE","SHANIKA","MELONIE","MAZIE","JAZMIN","INGA","HOA","HETTIE","GERALYN","FONDA","ESTRELLA","ADELLA","SU","SARITA","RINA","MILISSA",
// "MARIBETH","GOLDA","EVON","ETHELYN","ENEDINA","CHERISE","CHANA","VELVA","TAWANNA","SADE","MIRTA","LI","KARIE","JACINTA","ELNA","DAVINA","CIERRA","ASHLIE","ALBERTHA",
// "TANESHA","STEPHANI","NELLE","MINDI","LU","LORINDA","LARUE","FLORENE","DEMETRA","DEDRA","CIARA","CHANTELLE","ASHLY","SUZY","ROSALVA","NOELIA","LYDA","LEATHA",
// "KRYSTYNA","KRISTAN","KARRI","DARLINE","DARCIE","CINDA","CHEYENNE","CHERRIE","AWILDA","ALMEDA","ROLANDA","LANETTE","JERILYN","GISELE","EVALYN","CYNDI","CLETA",
// "CARIN","ZINA","ZENA","VELIA","TANIKA","PAUL","CHARISSA","THOMAS","TALIA","MARGARETE","LAVONDA","KAYLEE","KATHLENE","JONNA","IRENA","ILONA","IDALIA","CANDIS",
// "CANDANCE","BRANDEE","ANITRA","ALIDA","SIGRID","NICOLETTE","MARYJO","LINETTE","HEDWIG","CHRISTIANA","CASSIDY","ALEXIA","TRESSIE","MODESTA","LUPITA","LITA","GLADIS",
// "EVELIA","DAVIDA","CHERRI","CECILY","ASHELY","ANNABEL","AGUSTINA","WANITA","SHIRLY","ROSAURA","HULDA","EUN","BAILEY","YETTA","VERONA","THOMASINA","SIBYL","SHANNAN",
// "MECHELLE","LUE","LEANDRA","LANI","KYLEE","KANDY","JOLYNN","FERNE","EBONI","CORENE","ALYSIA","ZULA","NADA","MOIRA","LYNDSAY","LORRETTA","JUAN","JAMMIE","HORTENSIA",
// "GAYNELL","CAMERON","ADRIA","VINA","VICENTA","TANGELA","STEPHINE","NORINE","NELLA","LIANA","LESLEE","KIMBERELY","ILIANA","GLORY","FELICA","EMOGENE","ELFRIEDE","EDEN",
// "EARTHA","CARMA","BEA","OCIE","MARRY","LENNIE","KIARA","JACALYN","CARLOTA","ARIELLE","YU","STAR","OTILIA","KIRSTIN","KACEY","JOHNETTA","JOEY","JOETTA","JERALDINE",
// "JAUNITA","ELANA","DORTHEA","CAMI","AMADA","ADELIA","VERNITA","TAMAR","SIOBHAN","RENEA","RASHIDA","OUIDA","ODELL","NILSA","MERYL","KRISTYN","JULIETA","DANICA",
// "BREANNE","AUREA","ANGLEA","SHERRON","ODETTE","MALIA","LORELEI","LIN","LEESA","KENNA","KATHLYN","FIONA","CHARLETTE","SUZIE","SHANTELL","SABRA","RACQUEL","MYONG",
// "MIRA","MARTINE","LUCIENNE","LAVADA","JULIANN","JOHNIE","ELVERA","DELPHIA","CLAIR","CHRISTIANE","CHAROLETTE","CARRI","AUGUSTINE","ASHA","ANGELLA","PAOLA","NINFA",
// "LEDA","LAI","EDA","SUNSHINE","STEFANI","SHANELL","PALMA","MACHELLE","LISSA","KECIA","KATHRYNE","KARLENE","JULISSA","JETTIE","JENNIFFER","HUI","CORRINA","CHRISTOPHER",
// "CAROLANN","ALENA","TESS","ROSARIA","MYRTICE","MARYLEE","LIANE","KENYATTA","JUDIE","JANEY","IN","ELMIRA","ELDORA","DENNA","CRISTI","CATHI","ZAIDA","VONNIE","VIVA",
// "VERNIE","ROSALINE","MARIELA","LUCIANA","LESLI","KARAN","FELICE","DENEEN","ADINA","WYNONA","TARSHA","SHERON","SHASTA","SHANITA","SHANI","SHANDRA","RANDA","PINKIE",
// "PARIS","NELIDA","MARILOU","LYLA","LAURENE","LACI","JOI","JANENE","DOROTHA","DANIELE","DANI","CAROLYNN","CARLYN","BERENICE","AYESHA","ANNELIESE","ALETHEA","THERSA",
// "TAMIKO","RUFINA","OLIVA","MOZELL","MARYLYN","MADISON","KRISTIAN","KATHYRN","KASANDRA","KANDACE","JANAE","GABRIEL","DOMENICA","DEBBRA","DANNIELLE","CHUN","BUFFY",
// "BARBIE","ARCELIA","AJA","ZENOBIA","SHAREN","SHAREE","PATRICK","PAGE","MY","LAVINIA","KUM","KACIE","JACKELINE","HUONG","FELISA","EMELIA","ELEANORA","CYTHIA","CRISTIN",
// "CLYDE","CLARIBEL","CARON","ANASTACIA","ZULMA","ZANDRA","YOKO","TENISHA","SUSANN","SHERILYN","SHAY","SHAWANDA","SABINE","ROMANA","MATHILDA","LINSEY","KEIKO","JOANA",
// "ISELA","GRETTA","GEORGETTA","EUGENIE","DUSTY","DESIRAE","DELORA","CORAZON","ANTONINA","ANIKA","WILLENE","TRACEE","TAMATHA","REGAN","NICHELLE","MICKIE","MAEGAN",
// "LUANA","LANITA","KELSIE","EDELMIRA","BREE","AFTON","TEODORA","TAMIE","SHENA","MEG","LINH","KELI","KACI","DANYELLE","BRITT","ARLETTE","ALBERTINE","ADELLE","TIFFINY",
// "STORMY","SIMONA","NUMBERS","NICOLASA","NICHOL","NIA","NAKISHA","MEE","MAIRA","LOREEN","KIZZY","JOHNNY","JAY","FALLON","CHRISTENE","BOBBYE","ANTHONY","YING","VINCENZA",
// "TANJA","RUBIE","RONI","QUEENIE","MARGARETT","KIMBERLI","IRMGARD","IDELL","HILMA","EVELINA","ESTA","EMILEE","DENNISE","DANIA","CARL","CARIE","ANTONIO","WAI","SANG",
// "RISA","RIKKI","PARTICIA","MUI","MASAKO","MARIO","LUVENIA","LOREE","LONI","LIEN","KEVIN","GIGI","FLORENCIA","DORIAN","DENITA","DALLAS","CHI","BILLYE","ALEXANDER",
// "TOMIKA","SHARITA","RANA","NIKOLE","NEOMA","MARGARITE","MADALYN","LUCINA","LAILA","KALI","JENETTE","GABRIELE","EVELYNE","ELENORA","CLEMENTINA","ALEJANDRINA","ZULEMA",
// "VIOLETTE","VANNESSA","THRESA","RETTA","PIA","PATIENCE","NOELLA","NICKIE","JONELL","DELTA","CHUNG","CHAYA","CAMELIA","BETHEL","ANYA","ANDREW","THANH","SUZANN",
// "SPRING","SHU","MILA","LILLA","LAVERNA","KEESHA","KATTIE","GIA","GEORGENE","EVELINE","ESTELL","ELIZBETH","VIVIENNE","VALLIE","TRUDIE","STEPHANE","MICHEL","MAGALY",
// "MADIE","KENYETTA","KARREN","JANETTA","HERMINE","HARMONY","DRUCILLA","DEBBI","CELESTINA","CANDIE","BRITNI","BECKIE","AMINA","ZITA","YUN","YOLANDE","VIVIEN","VERNETTA",
// "TRUDI","SOMMER","PEARLE","PATRINA","OSSIE","NICOLLE","LOYCE","LETTY","LARISA","KATHARINA","JOSELYN","JONELLE","JENELL","IESHA","HEIDE","FLORINDA","FLORENTINA","FLO",
// "ELODIA","DORINE","BRUNILDA","BRIGID","ASHLI","ARDELLA","TWANA","THU","TARAH","SUNG","SHEA","SHAVON","SHANE","SERINA","RAYNA","RAMONITA","NGA","MARGURITE","LUCRECIA",
// "KOURTNEY","KATI","JESUS","JESENIA","DIAMOND","CRISTA","AYANA","ALICA","ALIA","VINNIE","SUELLEN","ROMELIA","RACHELL","PIPER","OLYMPIA","MICHIKO","KATHALEEN","JOLIE",
// "JESSI","JANESSA","HANA","HA","ELEASE","CARLETTA","BRITANY","SHONA","SALOME","ROSAMOND","REGENA","RAINA","NGOC","NELIA","LOUVENIA","LESIA","LATRINA","LATICIA","LARHONDA",
// "JINA","JACKI","HOLLIS","HOLLEY","EMMY","DEEANN","CORETTA","ARNETTA","VELVET","THALIA","SHANICE","NETA","MIKKI","MICKI","LONNA","LEANA","LASHUNDA","KILEY","JOYE",
// "JACQULYN","IGNACIA","HYUN","HIROKO","HENRY","HENRIETTE","ELAYNE","DELINDA","DARNELL","DAHLIA","COREEN","CONSUELA","CONCHITA","CELINE","BABETTE","AYANNA","ANETTE",
// "ALBERTINA","SKYE","SHAWNEE","SHANEKA","QUIANA","PAMELIA","MIN","MERRI","MERLENE","MARGIT","KIESHA","KIERA","KAYLENE","JODEE","JENISE","ERLENE","EMMIE","ELSE","DARYL",
// "DALILA","DAISEY","CODY","CASIE","BELIA","BABARA","VERSIE","VANESA","SHELBA","SHAWNDA","SAM","NORMAN","NIKIA","NAOMA","MARNA","MARGERET","MADALINE","LAWANA","KINDRA",
// "JUTTA","JAZMINE","JANETT","HANNELORE","GLENDORA","GERTRUD","GARNETT","FREEDA","FREDERICA","FLORANCE","FLAVIA","DENNIS","CARLINE","BEVERLEE","ANJANETTE","VALDA","TRINITY",
// "TAMALA","STEVIE","SHONNA","SHA","SARINA","ONEIDA","MICAH","MERILYN","MARLEEN","LURLINE","LENNA","KATHERIN","JIN","JENI","HAE","GRACIA","GLADY","FARAH","ERIC","ENOLA",
// "EMA","DOMINQUE","DEVONA","DELANA","CECILA","CAPRICE","ALYSHA","ALI","ALETHIA","VENA","THERESIA","TAWNY","SONG","SHAKIRA","SAMARA","SACHIKO","RACHELE","PAMELLA","NICKY",
// "MARNI","MARIEL","MAREN","MALISA","LIGIA","LERA","LATORIA","LARAE","KIMBER","KATHERN","KAREY","JENNEFER","JANETH","HALINA","FREDIA","DELISA","DEBROAH","CIERA","CHIN",
// "ANGELIKA","ANDREE","ALTHA","YEN","VIVAN","TERRESA","TANNA","SUK","SUDIE","SOO","SIGNE","SALENA","RONNI","REBBECCA","MYRTIE","MCKENZIE","MALIKA","MAIDA","LOAN","LEONARDA",
// "KAYLEIGH","FRANCE","ETHYL","ELLYN","DAYLE","CAMMIE","BRITTNI","BIRGIT","AVELINA","ASUNCION","ARIANNA","AKIKO","VENICE","TYESHA","TONIE","TIESHA","TAKISHA","STEFFANIE",
// "SINDY","SANTANA","MEGHANN","MANDA","MACIE","LADY","KELLYE","KELLEE","JOSLYN","JASON","INGER","INDIRA","GLINDA","GLENNIS","FERNANDA","FAUSTINA","ENEIDA","ELICIA","DOT",
// "DIGNA","DELL","ARLETTA","ANDRE","WILLIA","TAMMARA","TABETHA","SHERRELL","SARI","REFUGIO","REBBECA","PAULETTA","NIEVES","NATOSHA","NAKITA","MAMMIE","KENISHA","KAZUKO",
// "KASSIE","GARY","EARLEAN","DAPHINE","CORLISS","CLOTILDE","CAROLYNE","BERNETTA","AUGUSTINA","AUDREA","ANNIS","ANNABELL","YAN","TENNILLE","TAMICA","SELENE","SEAN","ROSANA",
// "REGENIA","QIANA","MARKITA","MACY","LEEANNE","LAURINE","KYM","JESSENIA","JANITA","GEORGINE","GENIE","EMIKO","ELVIE","DEANDRA","DAGMAR","CORIE","COLLEN","CHERISH",
// "ROMAINE","PORSHA","PEARLENE","MICHELINE","MERNA","MARGORIE","MARGARETTA","LORE","KENNETH","JENINE","HERMINA","FREDERICKA","ELKE","DRUSILLA","DORATHY","DIONE","DESIRE",
// "CELENA","BRIGIDA","ANGELES","ALLEGRA","THEO","TAMEKIA","SYNTHIA","STEPHEN","SOOK","SLYVIA","ROSANN","REATHA","RAYE","MARQUETTA","MARGART","LING","LAYLA","KYMBERLY",
// "KIANA","KAYLEEN","KATLYN","KARMEN","JOELLA","IRINA","EMELDA","ELENI","DETRA","CLEMMIE","CHERYLL","CHANTELL","CATHEY","ARNITA","ARLA","ANGLE","ANGELIC","ALYSE","ZOFIA",
// "THOMASINE","TENNIE","SON","SHERLY","SHERLEY","SHARYL","REMEDIOS","PETRINA","NICKOLE","MYUNG","MYRLE","MOZELLA","LOUANNE","LISHA","LATIA","LANE","KRYSTA","JULIENNE",
// "JOEL","JEANENE","JACQUALINE","ISAURA","GWENDA","EARLEEN","DONALD","CLEOPATRA","CARLIE","AUDIE","ANTONIETTA","ALISE","ALEX","VERDELL","VAL","TYLER","TOMOKO","THAO",
// "TALISHA","STEVEN","SO","SHEMIKA","SHAUN","SCARLET","SAVANNA","SANTINA","ROSIA","RAEANN","ODILIA","NANA","MINNA","MAGAN","LYNELLE","LE","KARMA","JOEANN","IVANA",
// "INELL","ILANA","HYE","HONEY","HEE","GUDRUN","FRANK","DREAMA","CRISSY","CHANTE","CARMELINA","ARVILLA","ARTHUR","ANNAMAE","ALVERA","ALEIDA","AARON","YEE","YANIRA",
// "VANDA","TIANNA","TAM","STEFANIA","SHIRA","PERRY","NICOL","NANCIE","MONSERRATE","MINH","MELYNDA","MELANY","MATTHEW","LOVELLA","LAURE","KIRBY","KACY","JACQUELYNN",
// "HYON","GERTHA","FRANCISCO","ELIANA","CHRISTENA","CHRISTEEN","CHARISE","CATERINA","CARLEY","CANDYCE","ARLENA","AMMIE","YANG","WILLETTE","VANITA","TUYET","TINY",
// "SYREETA","SILVA","SCOTT","RONALD","PENNEY","NYLA","MICHAL","MAURICE","MARYAM","MARYA","MAGEN","LUDIE","LOMA","LIVIA","LANELL","KIMBERLIE","JULEE","DONETTA","DIEDRA",
// "DENISHA","DEANE","DAWNE","CLARINE","CHERRYL","BRONWYN","BRANDON","ALLA","VALERY","TONDA","SUEANN","SORAYA","SHOSHANA","SHELA","SHARLEEN","SHANELLE","NERISSA",
// "MICHEAL","MERIDITH","MELLIE","MAYE","MAPLE","MAGARET","LUIS","LILI","LEONILA","LEONIE","LEEANNA","LAVONIA","LAVERA","KRISTEL","KATHEY","KATHE","JUSTIN","JULIAN",
// "JIMMY","JANN","ILDA","HILDRED","HILDEGARDE","GENIA","FUMIKO","EVELIN","ERMELINDA","ELLY","DUNG","DOLORIS","DIONNA","DANAE","BERNEICE","ANNICE","ALIX","VERENA",
// "VERDIE","TRISTAN","SHAWNNA","SHAWANA","SHAUNNA","ROZELLA","RANDEE","RANAE","MILAGRO","LYNELL","LUISE","LOUIE","LOIDA","LISBETH","KARLEEN","JUNITA","JONA","ISIS",
// "HYACINTH","HEDY","GWENN","ETHELENE","ERLINE","EDWARD","DONYA","DOMONIQUE","DELICIA","DANNETTE","CICELY","BRANDA","BLYTHE","BETHANN","ASHLYN","ANNALEE","ALLINE",
// "YUKO","VELLA","TRANG","TOWANDA","TESHA","SHERLYN","NARCISA","MIGUELINA","MERI","MAYBELL","MARLANA","MARGUERITA","MADLYN","LUNA","LORY","LORIANN","LIBERTY",
// "LEONORE","LEIGHANN","LAURICE","LATESHA","LARONDA","KATRICE","KASIE","KARL","KALEY","JADWIGA","GLENNIE","GEARLDINE","FRANCINA","EPIFANIA","DYAN","DORIE","DIEDRE",
// "DENESE","DEMETRICE","DELENA","DARBY","CRISTIE","CLEORA","CATARINA","CARISA","BERNIE","BARBERA","ALMETA","TRULA","TEREASA","SOLANGE","SHEILAH","SHAVONNE","SANORA",
// "ROCHELL","MATHILDE","MARGARETA","MAIA","LYNSEY","LAWANNA","LAUNA","KENA","KEENA","KATIA","JAMEY","GLYNDA","GAYLENE","ELVINA","ELANOR","DANUTA","DANIKA","CRISTEN",
// "CORDIE","COLETTA","CLARITA","CARMON","BRYNN","AZUCENA","AUNDREA","ANGELE","YI","WALTER","VERLIE","VERLENE","TAMESHA","SILVANA","SEBRINA","SAMIRA","REDA","RAYLENE",
// "PENNI","PANDORA","NORAH","NOMA","MIREILLE","MELISSIA","MARYALICE","LARAINE","KIMBERY","KARYL","KARINE","KAM","JOLANDA","JOHANA","JESUSA","JALEESA","JAE","JACQUELYNE",
// "IRISH","ILUMINADA","HILARIA","HANH","GENNIE","FRANCIE","FLORETTA","EXIE","EDDA","DREMA","DELPHA","BEV","BARBAR","ASSUNTA","ARDELL","ANNALISA","ALISIA","YUKIKO",
// "YOLANDO","WONDA","WEI","WALTRAUD","VETA","TEQUILA","TEMEKA","TAMEIKA","SHIRLEEN","SHENITA","PIEDAD","OZELLA","MIRTHA","MARILU","KIMIKO","JULIANE","JENICE","JEN",
// "JANAY","JACQUILINE","HILDE","FE","FAE","EVAN","EUGENE","ELOIS","ECHO","DEVORAH","CHAU","BRINDA","BETSEY","ARMINDA","ARACELIS","APRYL","ANNETT","ALISHIA","VEOLA",
// "USHA","TOSHIKO","THEOLA","TASHIA","TALITHA","SHERY","RUDY","RENETTA","REIKO","RASHEEDA","OMEGA","OBDULIA","MIKA","MELAINE","MEGGAN","MARTIN","MARLEN","MARGET",
// "MARCELINE","MANA","MAGDALEN","LIBRADA","LEZLIE","LEXIE","LATASHIA","LASANDRA","KELLE","ISIDRA","ISA","INOCENCIA","GWYN","FRANCOISE","ERMINIA","ERINN","DIMPLE",
// "DEVORA","CRISELDA","ARMANDA","ARIE","ARIANE","ANGELO","ANGELENA","ALLEN","ALIZA","ADRIENE","ADALINE","XOCHITL","TWANNA","TRAN","TOMIKO","TAMISHA","TAISHA","SUSY",
// "SIU","RUTHA","ROXY","RHONA","RAYMOND","OTHA","NORIKO","NATASHIA","MERRIE","MELVIN","MARINDA","MARIKO","MARGERT","LORIS","LIZZETTE","LEISHA","KAILA","KA","JOANNIE",
// "JERRICA","JENE","JANNET","JANEE","JACINDA","HERTA","ELENORE","DORETTA","DELAINE","DANIELL","CLAUDIE","CHINA","BRITTA","APOLONIA","AMBERLY","ALEASE","YURI","YUK",
// "WEN","WANETA","UTE","TOMI","SHARRI","SANDIE","ROSELLE","REYNALDA","RAGUEL","PHYLICIA","PATRIA","OLIMPIA","ODELIA","MITZIE","MITCHELL","MISS","MINDA","MIGNON","MICA",
// "MENDY","MARIVEL","MAILE","LYNETTA","LAVETTE","LAURYN","LATRISHA","LAKIESHA","KIERSTEN","KARY","JOSPHINE","JOLYN","JETTA","JANISE","JACQUIE","IVELISSE","GLYNIS","GIANNA",
// "GAYNELLE","EMERALD","DEMETRIUS","DANYELL","DANILLE","DACIA","CORALEE","CHER","CEOLA","BRETT","BELL","ARIANNE","ALESHIA","YUNG","WILLIEMAE","TROY","TRINH","THORA","TAI",
// "SVETLANA","SHERIKA","SHEMEKA","SHAUNDA","ROSELINE","RICKI","MELDA","MALLIE","LAVONNA","LATINA","LARRY","LAQUANDA","LALA","LACHELLE","KLARA","KANDIS","JOHNA","JEANMARIE",
// "JAYE","HANG","GRAYCE","GERTUDE","EMERITA","EBONIE","CLORINDA","CHING","CHERY","CAROLA","BREANN","BLOSSOM","BERNARDINE","BECKI","ARLETHA","ARGELIA","ARA","ALITA","YULANDA",
// "YON","YESSENIA","TOBI","TASIA","SYLVIE","SHIRL","SHIRELY","SHERIDAN","SHELLA","SHANTELLE","SACHA","ROYCE","REBECKA","REAGAN","PROVIDENCIA","PAULENE","MISHA","MIKI","MARLINE",
// "MARICA","LORITA","LATOYIA","LASONYA","KERSTIN","KENDA","KEITHA","KATHRIN","JAYMIE","JACK","GRICELDA","GINETTE","ERYN","ELINA","ELFRIEDA","DANYEL","CHEREE","CHANELLE",
// "BARRIE","AVERY","AURORE","ANNAMARIA","ALLEEN","AILENE","AIDE","YASMINE","VASHTI","VALENTINE","TREASA","TORY","TIFFANEY","SHERYLL","SHARIE","SHANAE","SAU","RAISA","PA",
// "NEDA","MITSUKO","MIRELLA","MILDA","MARYANNA","MARAGRET","MABELLE","LUETTA","LORINA","LETISHA","LATARSHA","LANELLE","LAJUANA","KRISSY","KARLY","KARENA","JON","JESSIKA",
// "JERICA","JEANELLE","JANUARY","JALISA","JACELYN","IZOLA","IVEY","GREGORY","EUNA","ETHA","DREW","DOMITILA","DOMINICA","DAINA","CREOLA","CARLI","CAMIE","BUNNY","BRITTNY",
// "ASHANTI","ANISHA","ALEEN","ADAH","YASUKO","WINTER","VIKI","VALRIE","TONA","TINISHA","THI","TERISA","TATUM","TANEKA","SIMONNE","SHALANDA","SERITA","RESSIE","REFUGIA",
// "PAZ","OLENE","NA","MERRILL","MARGHERITA","MANDIE","MAN","MAIRE","LYNDIA","LUCI","LORRIANE","LORETA","LEONIA","LAVONA","LASHAWNDA","LAKIA","KYOKO","KRYSTINA","KRYSTEN",
// "KENIA","KELSI","JUDE","JEANICE","ISOBEL","GEORGIANN","GENNY","FELICIDAD","EILENE","DEON","DELOISE","DEEDEE","DANNIE","CONCEPTION","CLORA","CHERILYN","CHANG","CALANDRA",
// "BERRY","ARMANDINA","ANISA","ULA","TIMOTHY","TIERA","THERESSA","STEPHANIA","SIMA","SHYLA","SHONTA","SHERA","SHAQUITA","SHALA","SAMMY","ROSSANA","NOHEMI","NERY","MORIAH",
// "MELITA","MELIDA","MELANI","MARYLYNN","MARISHA","MARIETTE","MALORIE","MADELENE","LUDIVINA","LORIA","LORETTE","LORALEE","LIANNE","LEON","LAVENIA","LAURINDA","LASHON","KIT",
// "KIMI","KEILA","KATELYNN","KAI","JONE","JOANE","JI","JAYNA","JANELLA","JA","HUE","HERTHA","FRANCENE","ELINORE","DESPINA","DELSIE","DEEDRA","CLEMENCIA","CARRY","CAROLIN",
// "CARLOS","BULAH","BRITTANIE","BOK","BLONDELL","BIBI","BEAULAH","BEATA","ANNITA","AGRIPINA","VIRGEN","VALENE","UN","TWANDA","TOMMYE","TOI","TARRA","TARI","TAMMERA","SHAKIA",
// "SADYE","RUTHANNE","ROCHEL","RIVKA","PURA","NENITA","NATISHA","MING","MERRILEE","MELODEE","MARVIS","LUCILLA","LEENA","LAVETA","LARITA","LANIE","KEREN","ILEEN","GEORGEANN",
// "GENNA","GENESIS","FRIDA","EWA","EUFEMIA","EMELY","ELA","EDYTH","DEONNA","DEADRA","DARLENA","CHANELL","CHAN","CATHERN","CASSONDRA","CASSAUNDRA","BERNARDA","BERNA","ARLINDA",
// "ANAMARIA","ALBERT","WESLEY","VERTIE","VALERI","TORRI","TATYANA","STASIA","SHERISE","SHERILL","SEASON","SCOTTIE","SANDA","RUTHE","ROSY","ROBERTO","ROBBI","RANEE","QUYEN",
// "PEARLY","PALMIRA","ONITA","NISHA","NIESHA","NIDA","NEVADA","NAM","MERLYN","MAYOLA","MARYLOUISE","MARYLAND","MARX","MARTH","MARGENE","MADELAINE","LONDA","LEONTINE",
// "LEOMA","LEIA","LAWRENCE","LAURALEE","LANORA","LAKITA","KIYOKO","KETURAH","KATELIN","KAREEN","JONIE","JOHNETTE","JENEE","JEANETT","IZETTA","HIEDI","HEIKE","HASSIE",
// "HAROLD","GIUSEPPINA","GEORGANN","FIDELA","FERNANDE","ELWANDA","ELLAMAE","ELIZ","DUSTI","DOTTY","CYNDY","CORALIE","CELESTA","ARGENTINA","ALVERTA","XENIA","WAVA",
// "VANETTA","TORRIE","TASHINA","TANDY","TAMBRA","TAMA","STEPANIE","SHILA","SHAUNTA","SHARAN","SHANIQUA","SHAE","SETSUKO","SERAFINA","SANDEE","ROSAMARIA","PRISCILA",
// "OLINDA","NADENE","MUOI","MICHELINA","MERCEDEZ","MARYROSE","MARIN","MARCENE","MAO","MAGALI","MAFALDA","LOGAN","LINN","LANNIE","KAYCE","KAROLINE","KAMILAH","KAMALA",
// "JUSTA","JOLINE","JENNINE","JACQUETTA","IRAIDA","GERALD","GEORGEANNA","FRANCHESCA","FAIRY","EMELINE","ELANE","EHTEL","EARLIE","DULCIE","DALENE","CRIS","CLASSIE",
// "CHERE","CHARIS","CAROYLN","CARMINA","CARITA","BRIAN","BETHANIE","AYAKO","ARICA","AN","ALYSA","ALESSANDRA","AKILAH","ADRIEN","ZETTA","YOULANDA","YELENA","YAHAIRA",
// "XUAN","WENDOLYN","VICTOR","TIJUANA","TERRELL","TERINA","TERESIA","SUZI","SUNDAY","SHERELL","SHAVONDA","SHAUNTE","SHARDA","SHAKITA","SENA","RYANN","RUBI","RIVA",
// "REGINIA","REA","RACHAL","PARTHENIA","PAMULA","MONNIE","MONET","MICHAELE","MELIA","MARINE","MALKA","MAISHA","LISANDRA","LEO","LEKISHA","LEAN","LAURENCE","LAKENDRA",
// "KRYSTIN","KORTNEY","KIZZIE","KITTIE","KERA","KENDAL","KEMBERLY","KANISHA","JULENE","JULE","JOSHUA","JOHANNE","JEFFREY","JAMEE","HAN","HALLEY","GIDGET","GALINA",
// "FREDRICKA","FLETA","FATIMAH","EUSEBIA","ELZA","ELEONORE","DORTHEY","DORIA","DONELLA","DINORAH","DELORSE","CLARETHA","CHRISTINIA","CHARLYN","BONG","BELKIS","AZZIE",
// "ANDERA","AIKO","ADENA","YER","YAJAIRA","WAN","VANIA","ULRIKE","TOSHIA","TIFANY","STEFANY","SHIZUE","SHENIKA","SHAWANNA","SHAROLYN","SHARILYN","SHAQUANA","SHANTAY",
// "SEE","ROZANNE","ROSELEE","RICKIE","REMONA","REANNA","RAELENE","QUINN","PHUNG","PETRONILA","NATACHA","NANCEY","MYRL","MIYOKO","MIESHA","MERIDETH","MARVELLA",
// "MARQUITTA","MARHTA","MARCHELLE","LIZETH","LIBBIE","LAHOMA","LADAWN","KINA","KATHELEEN","KATHARYN","KARISA","KALEIGH","JUNIE","JULIEANN","JOHNSIE","JANEAN",
// "JAIMEE","JACKQUELINE","HISAKO","HERMA","HELAINE","GWYNETH","GLENN","GITA","EUSTOLIA","EMELINA","ELIN","EDRIS","DONNETTE","DONNETTA","DIERDRE","DENAE","DARCEL",
// "CLAUDE","CLARISA","CINDERELLA","CHIA","CHARLESETTA","CHARITA","CELSA","CASSY","CASSI","CARLEE","BRUNA","BRITTANEY","BRANDE","BILLI","BAO","ANTONETTA","ANGLA",
// "ANGELYN","ANALISA","ALANE","WENONA","WENDIE","VERONIQUE","VANNESA","TOBIE","TEMPIE","SUMIKO","SULEMA","SPARKLE","SOMER","SHEBA","SHAYNE","SHARICE","SHANEL",
// "SHALON","SAGE","ROY","ROSIO","ROSELIA","RENAY","REMA","REENA","PORSCHE","PING","PEG","OZIE","ORETHA","ORALEE","ODA","NU","NGAN","NAKESHA","MILLY","MARYBELLE",
// "MARLIN","MARIS","MARGRETT","MARAGARET","MANIE","LURLENE","LILLIA","LIESELOTTE","LAVELLE","LASHAUNDA","LAKEESHA","KEITH","KAYCEE","KALYN","JOYA","JOETTE","JENAE",
// "JANIECE","ILLA","GRISEL","GLAYDS","GENEVIE","GALA","FREDDA","FRED","ELMER","ELEONOR","DEBERA","DEANDREA","DAN","CORRINNE","CORDIA","CONTESSA","COLENE",
// "CLEOTILDE","CHARLOTT","CHANTAY","CECILLE","BEATRIS","AZALEE","ARLEAN","ARDATH","ANJELICA","ANJA","ALFREDIA","ALEISHA","ADAM","ZADA","YUONNE","XIAO",
// "WILLODEAN","WHITLEY","VENNIE","VANNA","TYISHA","TOVA","TORIE","TONISHA","TILDA","TIEN","TEMPLE","SIRENA","SHERRIL","SHANTI","SHAN","SENAIDA","SAMELLA",
// "ROBBYN","RENDA","REITA","PHEBE","PAULITA","NOBUKO","NGUYET","NEOMI","MOON","MIKAELA","MELANIA","MAXIMINA","MARG","MAISIE","LYNNA","LILLI","LAYNE",
// "LASHAUN","LAKENYA","LAEL","KIRSTIE","KATHLINE","KASHA","KARLYN","KARIMA","JOVAN","JOSEFINE","JENNELL","JACQUI","JACKELYN","HYO","HIEN","GRAZYNA",
// "FLORRIE","FLORIA","ELEONORA","DWANA","DORLA","DONG","DELMY","DEJA","DEDE","DANN","CRYSTA","CLELIA","CLARIS","CLARENCE","CHIEKO","CHERLYN",
// "CHERELLE","CHARMAIN","CHARA","CAMMY","BEE","ARNETTE","ARDELLE","ANNIKA","AMIEE","AMEE","ALLENA","YVONE","YUKI","YOSHIE","YEVETTE","YAEL","WILLETTA",
// "VONCILE","VENETTA","TULA","TONETTE","TIMIKA","TEMIKA","TELMA","TEISHA","TAREN","TA","STACEE","SHIN","SHAWNTA","SATURNINA","RICARDA","POK","PASTY",
// "ONIE","NUBIA","MORA","MIKE","MARIELLE","MARIELLA","MARIANELA","MARDELL","MANY","LUANNA","LOISE","LISABETH","LINDSY","LILLIANA","LILLIAM","LELAH",
// "LEIGHA","LEANORA","LANG","KRISTEEN","KHALILAH","KEELEY","KANDRA","JUNKO","JOAQUINA","JERLENE","JANI","JAMIKA","JAME","HSIU","HERMILA","GOLDEN","GENEVIVE",
// "EVIA","EUGENA","EMMALINE","ELFREDA","ELENE","DONETTE","DELCIE","DEEANNA","DARCEY","CUC","CLARINDA","CIRA","CHAE","CELINDA","CATHERYN",
// "CATHERIN","CASIMIRA","CARMELIA","CAMELLIA","BREANA","BOBETTE","BERNARDINA","BEBE","BASILIA","ARLYNE","AMAL","ALAYNA","ZONIA","ZENIA","YURIKO","YAEKO",
// "WYNELL","WILLOW","WILLENA","VERNIA","TU","TRAVIS","TORA","TERRILYN","TERICA","TENESHA","TAWNA","TAJUANA","TAINA","STEPHNIE","SONA","SOL",
// "SINA","SHONDRA","SHIZUKO","SHERLENE","SHERICE","SHARIKA","ROSSIE","ROSENA","RORY","RIMA","RIA","RHEBA","RENNA","PETER","NATALYA","NANCEE","MELODI",
// "MEDA","MAXIMA","MATHA","MARKETTA","MARICRUZ","MARCELENE","MALVINA","LUBA","LOUETTA","LEIDA","LECIA","LAURAN","LASHAWNA","LAINE","KHADIJAH",
// "KATERINE","KASI","KALLIE","JULIETTA","JESUSITA","JESTINE","JESSIA","JEREMY","JEFFIE","JANYCE","ISADORA","GEORGIANNE","FIDELIA","EVITA","EURA",
// "EULAH","ESTEFANA","ELSY","ELIZABET","ELADIA","DODIE","DION","DIA","DENISSE","DELORAS","DELILA","DAYSI","DAKOTA","CURTIS","CRYSTLE","CONCHA","COLBY",
// "CLARETTA","CHU","CHRISTIA","CHARLSIE","CHARLENA","CARYLON","BETTYANN","ASLEY","ASHLEA","AMIRA","AI","AGUEDA","AGNUS","YUETTE","VINITA","VICTORINA",
// "TYNISHA","TREENA","TOCCARA","TISH","THOMASENA","TEGAN","SOILA","SHILOH","SHENNA","SHARMAINE","SHANTAE","SHANDI","SEPTEMBER","SARAN","SARAI","SANA",
// "SAMUEL","SALLEY","ROSETTE","ROLANDE","REGINE","OTELIA","OSCAR","OLEVIA","NICHOLLE","NECOLE","NAIDA","MYRTA","MYESHA","MITSUE","MINTA","MERTIE",
// "MARGY","MAHALIA","MADALENE","LOVE","LOURA","LOREAN","LEWIS","LESHA","LEONIDA","LENITA","LAVONE","LASHELL","LASHANDRA","LAMONICA","KIMBRA","KATHERINA",
// "KARRY","KANESHA","JULIO","JONG","JENEVA","JAQUELYN","HWA","GILMA","GHISLAINE","GERTRUDIS","FRANSISCA","FERMINA","ETTIE","ETSUKO","ELLIS","ELLAN",
// "ELIDIA","EDRA","DORETHEA","DOREATHA","DENYSE","DENNY","DEETTA","DAINE","CYRSTAL","CORRIN","CAYLA","CARLITA","CAMILA","BURMA","BULA","BUENA","BLAKE",
// "BARABARA","AVRIL","AUSTIN","ALAINE","ZANA","WILHEMINA","WANETTA","VIRGIL","VI","VERONIKA","VERNON","VERLINE","VASILIKI","TONITA","TISA","TEOFILA",
// "TAYNA","TAUNYA","TANDRA","TAKAKO","SUNNI","SUANNE","SIXTA","SHARELL","SEEMA","RUSSELL","ROSENDA","ROBENA","RAYMONDE","PEI","PAMILA","OZELL","NEIDA",
// "NEELY","MISTIE","MICHA","MERISSA","MAURITA","MARYLN","MARYETTA","MARSHALL","MARCELL","MALENA","MAKEDA","MADDIE","LOVETTA","LOURIE","LORRINE",
// "LORILEE","LESTER","LAURENA","LASHAY","LARRAINE","LAREE","LACRESHA","KRISTLE","KRISHNA","KEVA","KEIRA","KAROLE","JOIE","JINNY","JEANNETTA","JAMA","HEIDY",
// "GILBERTE","GEMA","FAVIOLA","EVELYNN","ENDA","ELLI","ELLENA","DIVINA","DAGNY","COLLENE","CODI","CINDIE","CHASSIDY","CHASIDY","CATRICE","CATHERINA",
// "CASSEY","CAROLL","CARLENA","CANDRA","CALISTA","BRYANNA","BRITTENY","BEULA","BARI","AUDRIE","AUDRIA","ARDELIA","ANNELLE","ANGILA","ALONA","ALLYN",
// "DOUGLAS","ROGER","JONATHAN","RALPH","NICHOLAS","BENJAMIN","BRUCE","HARRY","WAYNE","STEVE","HOWARD","ERNEST","PHILLIP","TODD","CRAIG","ALAN","PHILIP",
// "EARL","DANNY","BRYAN","STANLEY","LEONARD","NATHAN","MANUEL","RODNEY","MARVIN","VINCENT","JEFFERY","JEFF","CHAD","JACOB","ALFRED","BRADLEY","HERBERT",
// "FREDERICK","EDWIN","DON","RICKY","RANDALL","BARRY","BERNARD","LEROY","MARCUS","THEODORE","CLIFFORD","MIGUEL","JIM","TOM","CALVIN","BILL","LLOYD",
// "DEREK","WARREN","DARRELL","JEROME","FLOYD","ALVIN","TIM","GORDON","GREG","JORGE","DUSTIN","PEDRO","DERRICK","ZACHARY","HERMAN","GLEN","HECTOR",
// "RICARDO","RICK","BRENT","RAMON","GILBERT","MARC","REGINALD","RUBEN","NATHANIEL","RAFAEL","EDGAR","MILTON","RAUL","BEN","CHESTER","DUANE","FRANKLIN",
// "BRAD","RON","ROLAND","ARNOLD","HARVEY","JARED","ERIK","DARRYL","NEIL","JAVIER","FERNANDO","CLINTON","TED","MATHEW","TYRONE","DARREN","LANCE","KURT",
// "ALLAN","NELSON","GUY","CLAYTON","HUGH","MAX","DWAYNE","DWIGHT","ARMANDO","FELIX","EVERETT","IAN","WALLACE","KEN","BOB","ALFREDO","ALBERTO","DAVE",
// "IVAN","BYRON","ISAAC","MORRIS","CLIFTON","WILLARD","ROSS","ANDY","SALVADOR","KIRK","SERGIO","SETH","KENT","TERRANCE","EDUARDO","TERRENCE","ENRIQUE",
// "WADE","STUART","FREDRICK","ARTURO","ALEJANDRO","NICK","LUTHER","WENDELL","JEREMIAH","JULIUS","OTIS","TREVOR","OLIVER","LUKE","HOMER","GERARD","DOUG",
// "KENNY","HUBERT","LYLE","MATT","ALFONSO","ORLANDO","REX","CARLTON","ERNESTO","NEAL","PABLO","LORENZO","OMAR","WILBUR","GRANT","HORACE","RODERICK","ABRAHAM",
// "WILLIS","RICKEY","ANDRES","CESAR","JOHNATHAN","MALCOLM","RUDOLPH","DAMON","KELVIN","PRESTON","ALTON","ARCHIE","MARCO","WM","PETE","RANDOLPH","GARRY","GEOFFREY",
// "JONATHON","FELIPE","GERARDO","ED","DOMINIC","DELBERT","COLIN","GUILLERMO","EARNEST","LUCAS","BENNY","SPENCER","RODOLFO","MYRON","EDMUND","GARRETT","SALVATORE",
// "CEDRIC","LOWELL","GREGG","SHERMAN","WILSON","SYLVESTER","ROOSEVELT","ISRAEL","JERMAINE","FORREST","WILBERT","LELAND","SIMON","CLARK","IRVING","BRYANT","OWEN",
// "RUFUS","WOODROW","KRISTOPHER","MACK","LEVI","MARCOS","GUSTAVO","JAKE","LIONEL","GILBERTO","CLINT","NICOLAS","ISMAEL","ORVILLE","ERVIN","DEWEY","AL","WILFRED",
// "JOSH","HUGO","IGNACIO","CALEB","TOMAS","SHELDON","ERICK","STEWART","DOYLE","DARREL","ROGELIO","TERENCE","SANTIAGO","ALONZO","ELIAS","BERT","ELBERT","RAMIRO",
// "CONRAD","NOAH","GRADY","PHIL","CORNELIUS","LAMAR","ROLANDO","CLAY","PERCY","DEXTER","BRADFORD","DARIN","AMOS","MOSES","IRVIN","SAUL","ROMAN","RANDAL","TIMMY",
// "DARRIN","WINSTON","BRENDAN","ABEL","DOMINICK","BOYD","EMILIO","ELIJAH","DOMINGO","EMMETT","MARLON","EMANUEL","JERALD","EDMOND","EMIL","DEWAYNE","WILL","OTTO",
// "TEDDY","REYNALDO","BRET","JESS","TRENT","HUMBERTO","EMMANUEL","STEPHAN","VICENTE","LAMONT","GARLAND","MILES","EFRAIN","HEATH","RODGER","HARLEY","ETHAN","ELDON",
// "ROCKY","PIERRE","JUNIOR","FREDDY","ELI","BRYCE","ANTOINE","STERLING","CHASE","GROVER","ELTON","CLEVELAND","DYLAN","CHUCK","DAMIAN","REUBEN","STAN","AUGUST",
// "LEONARDO","JASPER","RUSSEL","ERWIN","BENITO","HANS","MONTE","BLAINE","ERNIE","CURT","QUENTIN","AGUSTIN","MURRAY","JAMAL","ADOLFO","HARRISON","TYSON","BURTON",
// "BRADY","ELLIOTT","WILFREDO","BART","JARROD","VANCE","DENIS","DAMIEN","JOAQUIN","HARLAN","DESMOND","ELLIOT","DARWIN","GREGORIO","BUDDY","XAVIER","KERMIT","ROSCOE",
// "ESTEBAN","ANTON","SOLOMON","SCOTTY","NORBERT","ELVIN","WILLIAMS","NOLAN","ROD","QUINTON","HAL","BRAIN","ROB","ELWOOD","KENDRICK","DARIUS","MOISES","FIDEL","THADDEUS",
// "CLIFF","MARCEL","JACKSON","RAPHAEL","BRYON","ARMAND","ALVARO","JEFFRY","DANE","JOESPH","THURMAN","NED","RUSTY","MONTY","FABIAN","REGGIE","MASON","GRAHAM","ISAIAH",
// "VAUGHN","GUS","LOYD","DIEGO","ADOLPH","NORRIS","MILLARD","ROCCO","GONZALO","DERICK","RODRIGO","WILEY","RIGOBERTO","ALPHONSO","TY","NOE","VERN","REED","JEFFERSON",
// "ELVIS","BERNARDO","MAURICIO","HIRAM","DONOVAN","BASIL","RILEY","NICKOLAS","MAYNARD","SCOT","VINCE","QUINCY","EDDY","SEBASTIAN","FEDERICO","ULYSSES","HERIBERTO",
// "DONNELL","COLE","DAVIS","GAVIN","EMERY","WARD","ROMEO","JAYSON","DANTE","CLEMENT","COY","MAXWELL","JARVIS","BRUNO","ISSAC","DUDLEY","BROCK","SANFORD","CARMELO",
// "BARNEY","NESTOR","STEFAN","DONNY","ART","LINWOOD","BEAU","WELDON","GALEN","ISIDRO","TRUMAN","DELMAR","JOHNATHON","SILAS","FREDERIC","DICK","IRWIN","MERLIN",
// "CHARLEY","MARCELINO","HARRIS","CARLO","TRENTON","KURTIS","HUNTER","AURELIO","WINFRED","VITO","COLLIN","DENVER","CARTER","LEONEL","EMORY","PASQUALE","MOHAMMAD",
// "MARIANO","DANIAL","LANDON","DIRK","BRANDEN","ADAN","BUFORD","GERMAN","WILMER","EMERSON","ZACHERY","FLETCHER","JACQUES","ERROL","DALTON","MONROE","JOSUE","EDWARDO",
// "BOOKER","WILFORD","SONNY","SHELTON","CARSON","THERON","RAYMUNDO","DAREN","HOUSTON","ROBBY","LINCOLN","GENARO","BENNETT","OCTAVIO","CORNELL","HUNG","ARRON","ANTONY",
// "HERSCHEL","GIOVANNI","GARTH","CYRUS","CYRIL","RONNY","LON","FREEMAN","DUNCAN","KENNITH","CARMINE","ERICH","CHADWICK","WILBURN","RUSS","REID","MYLES","ANDERSON",
// "MORTON","JONAS","FOREST","MITCHEL","MERVIN","ZANE","RICH","JAMEL","LAZARO","ALPHONSE","RANDELL","MAJOR","JARRETT","BROOKS","ABDUL","LUCIANO","SEYMOUR","EUGENIO",
// "MOHAMMED","VALENTIN","CHANCE","ARNULFO","LUCIEN","FERDINAND","THAD","EZRA","ALDO","RUBIN","ROYAL","MITCH","EARLE","ABE","WYATT","MARQUIS","LANNY","KAREEM","JAMAR",
// "BORIS","ISIAH","EMILE","ELMO","ARON","LEOPOLDO","EVERETTE","JOSEF","ELOY","RODRICK","REINALDO","LUCIO","JERROD","WESTON","HERSHEL","BARTON","PARKER","LEMUEL","BURT",
// "JULES","GIL","ELISEO","AHMAD","NIGEL","EFREN","ANTWAN","ALDEN","MARGARITO","COLEMAN","DINO","OSVALDO","LES","DEANDRE","NORMAND","KIETH","TREY","NORBERTO","NAPOLEON",
// "JEROLD","FRITZ","ROSENDO","MILFORD","CHRISTOPER","ALFONZO","LYMAN","JOSIAH","BRANT","WILTON","RICO","JAMAAL","DEWITT","BRENTON","OLIN","FOSTER","FAUSTINO","CLAUDIO",
// "JUDSON","GINO","EDGARDO","ALEC","TANNER","JARRED","DONN","TAD","PRINCE","PORFIRIO","ODIS","LENARD","CHAUNCEY","TOD","MEL","MARCELO","KORY","AUGUSTUS","KEVEN","HILARIO",
// "BUD","SAL","ORVAL","MAURO","ZACHARIAH","OLEN","ANIBAL","MILO","JED","DILLON","AMADO","NEWTON","LENNY","RICHIE","HORACIO","BRICE","MOHAMED","DELMER","DARIO","REYES","MAC",
// "JONAH","JERROLD","ROBT","HANK","RUPERT","ROLLAND","KENTON","DAMION","ANTONE","WALDO","FREDRIC","BRADLY","KIP","BURL","WALKER","TYREE","JEFFEREY","AHMED","WILLY","STANFORD",
// "OREN","NOBLE","MOSHE","MIKEL","ENOCH","BRENDON","QUINTIN","JAMISON","FLORENCIO","DARRICK","TOBIAS","HASSAN","GIUSEPPE","DEMARCUS","CLETUS","TYRELL","LYNDON","KEENAN","WERNER",
// "GERALDO","COLUMBUS","CHET","BERTRAM","MARKUS","HUEY","HILTON","DWAIN","DONTE","TYRON","OMER","ISAIAS","HIPOLITO","FERMIN","ADALBERTO","BO","BARRETT","TEODORO","MCKINLEY",
// "MAXIMO","GARFIELD","RALEIGH","LAWERENCE","ABRAM","RASHAD","KING","EMMITT","DARON","SAMUAL","MIQUEL","EUSEBIO","DOMENIC","DARRON","BUSTER","WILBER","RENATO","JC","HOYT",
// "HAYWOOD","EZEKIEL","CHAS","FLORENTINO","ELROY","CLEMENTE","ARDEN","NEVILLE","EDISON","DESHAWN","NATHANIAL","JORDON","DANILO","CLAUD","SHERWOOD","RAYMON","RAYFORD",
// "CRISTOBAL","AMBROSE","TITUS","HYMAN","FELTON","EZEQUIEL","ERASMO","STANTON","LONNY","LEN","IKE","MILAN","LINO","JAROD","HERB","ANDREAS","WALTON","RHETT","PALMER",
// "DOUGLASS","CORDELL","OSWALDO","ELLSWORTH","VIRGILIO","TONEY","NATHANAEL","DEL","BENEDICT","MOSE","JOHNSON","ISREAL","GARRET","FAUSTO","ASA","ARLEN","ZACK","WARNER",
// "MODESTO","FRANCESCO","MANUAL","GAYLORD","GASTON","FILIBERTO","DEANGELO","MICHALE","GRANVILLE","WES","MALIK","ZACKARY","TUAN","ELDRIDGE","CRISTOPHER","CORTEZ","ANTIONE",
// "MALCOM","LONG","KOREY","JOSPEH","COLTON","WAYLON","VON","HOSEA","SHAD","SANTO","RUDOLF","ROLF","REY","RENALDO","MARCELLUS","LUCIUS","KRISTOFER","BOYCE","BENTON",
// "HAYDEN","HARLAND","ARNOLDO","RUEBEN","LEANDRO","KRAIG","JERRELL","JEROMY","HOBERT","CEDRICK","ARLIE","WINFORD","WALLY","LUIGI","KENETH","JACINTO","GRAIG","FRANKLYN",
// "EDMUNDO","SID","PORTER","LEIF","JERAMY","BUCK","WILLIAN","VINCENZO","SHON","LYNWOOD","JERE","HAI","ELDEN","DORSEY","DARELL","BRODERICK","ALONSO"]


// let sortstr = str.sort();

// function findScore(sortstr) {
//     let totalscore = 0;
//     for(let i = 0; i<sortstr.length; i++) {
//         let scorename = 0;
//         let nameposition = i+1;
//         for(let j = 0; j<sortstr[i].length; j++) {
//             let charcode = sortstr[i].charCodeAt(j)-64;
//             scorename += charcode;
//         }
//         totalscore +=scorename*nameposition;
//     }
//     return totalscore;
// }

// console.log(findScore(sortstr)); // 871198282 v

// 23 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Non-Abundant Sums
/* <p>A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of $28$ would be $1 + 2 + 4 + 7 + 14 = 28$, which means that $28$ is a perfect number.</p>
<p>A number $n$ is called deficient if the sum of its proper divisors is less than $n$ and it is called abundant if this sum exceeds $n$.</p>

<p>As $12$ is the smallest abundant number, $1 + 2 + 3 + 4 + 6 = 16$, the smallest number that can be written as the sum of two abundant numbers is $24$. By mathematical analysis, it can be shown that all integers greater than $28123$ can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.</p>
<p>Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.</p> */



// function properDevisorstoArray(n) {
//     let arr = [1];
//     for (let i = 2; i <= Math.sqrt(n); i++) {
//         if (n % i === 0) {
//             arr.push(i);
//             if(i!=Math.sqrt(n))arr.push(n / i);
//         }
//     }
//     return arr;
// }

// function sumOfTwoAmbudant() {
//     const arrambudant = [];
//     let sum = 0;
//     for(let i=1; i<=28123; i++) {
//         const arr = properDevisorstoArray(i);
//         const count = arr.reduce((acc,elem)=>acc+elem);
//         if(count>i) arrambudant.push(i);
//     }
//     let set = new Set()
//     for(let i=0;i<arrambudant.length;i++) {
//         for(let j = i; j<arrambudant.length; j++) {
//             set.add(arrambudant[i]+arrambudant[j]);
//         }
//     }
//     console.log(arrambudant);
//     console.log(set);
//     for (let i = 1;i<=28123;i++) {
//         if(!set.has(i)) sum+=i;
//     }

//     console.log(sum);
// }
// sumOfTwoAmbudant(); // 4179871 V 

// 24 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Lexicographic Permutations

/* <p>A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:</p>
<p class="center">012   021   102   120   201   210</p>
<p>What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</p> */

// let litterals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

// let test = [0, 1, 2, 3]
// let testmut = [...test];
// let count = 1;
// // ПОяснение смотри в OneNote
// function lexicPermunt(arr) {
//     let index = -1;
//     for (let i = arr.length - 2; i >= 0; i--) {
//         if (arr[i] < arr[i + 1]) {
//             index = i;
//             break;
//         }
//     }
//     //условие выхода из рекурсии

//     if (index == -1) return arr;

//     for (let i = arr.length - 1; i > index; i--) {
//         if (arr[i] > arr[index]) {

//             const x = arr[index];
//             arr[index] = arr[i];
//             arr[i] = x;
//             break;
//         }
//     }

//     for (let i = index + 1, j = arr.length - 1; i < index + ((arr.length - index) / 2); i++, j--) {

//         const x = arr[i];
//         arr[i] = arr[j];
//         arr[j] = x;
//     }

//     count++;
//     if (count%1000==0) return arr;
//     return lexicPermunt(arr);
// }


// let newArr = lexicPermunt(litterals);
// console.log(count);

// for(let i=1; i<1000; i++) {
//     newArr = lexicPermunt(newArr);
// }
// console.log(newArr); // (10) [2, 7, 8, 3, 9, 1, 5, 4, 6, 0] 1000000
// console.log(count);

// 25 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// 1000-digit Fibonacci Number


// let a = '234502';
// let b = '050505';

// function subtractBibNum(num1, num2, sign = '') {
//     let maxnumdigits = 0;
//     if (num1.length >= num2.length) {
//         maxnumdigits = num1.length;
//         while (num2.length != maxnumdigits) { num2 = '0' + num2; }
//     } else { maxnumdigits = num2.length };

//     if (num1 < num2) return subtractBibNum(num2, num1, '-');

//     let subtract = '';

//     let indexCredit = new Array(num1.length).fill(0); //[0,0,0,0,0,0]      [0,0,0,1,0,0]
//     let indexDebit = new Array(num1.length).fill(0);  //[0,0,0,0,0,0]      [0,0,0,0,9,10]


//     for (let i = num1.length - 1; i >= 0; i--) {
//         if (num1[i] - indexCredit[i] + indexDebit[i] >= num2[i]) subtract = ((num1[i]- indexCredit[i] + indexDebit[i])  - num2[i]).toString() + subtract;
//         if (num1[i] - indexCredit[i] + indexDebit[i] < num2[i]) {
//             for (let j = i - 1; j >= 0; j--) {
//                 if (num1[j] > 0) {
//                     indexCredit[j] = 1;
//                     for (let n = j + 1; n <= i; n++) {
//                         if (n != i) { indexDebit[n] = 9 }
//                         else indexDebit[n] = 10;
//                     }
//                     break;
//                 }
//             }
//             console.log(indexCredit,indexDebit)
//             subtract = ((num1[i]- indexCredit[i] + indexDebit[i]) - num2[i]).toString() + subtract;
//         }
//     }
//     if(sign=='-') return subtract='-'+subtract;
//     return subtract;
// }

// console.log(subtractBibNum('120076','5234234'));

// function sumBigNum(arr) {
//     let memory = 0;
//     let sum = '';
//     let maxnumdigits = 0;
//     for (el of arr) {
//         if (el.length > maxnumdigits) maxnumdigits = el.length;
//     }
//     const buildarr = arr.map((el) => {
//         // console.log(el);
//         while (el.length != maxnumdigits) { el = '0' + el; }
//         return el;
//     });
//     // console.log(buildarr);
//     for (let i = maxnumdigits - 1; i >= 0; i--) {
//         for (let j = 0; j < buildarr.length; j++) {
//             memory += +buildarr[j][i];
//             if (j === buildarr.length - 1) {
//                 let char = memory.toString();
//                 let suffix = char.slice(-1);
//                 sum = [suffix, sum].join('');
//                 prefix = char.slice(0, -1);
//                 memory = +prefix;
//             }
//         }
//     }
//     if (memory != 0) sum = memory.toString() + sum;
//     // console.log(sum);
//     return sum;
// }


// let memo = [];

// function fibonacci(n) {
//     const fibNumbers = [1n, 1n];
//     for (let i = 2n; i < n; i=i+1n) {
//         const num = fibNumbers[i - 2n] + fibNumbers[i - 1n];
//         fibNumbers.push(num);
//     }
//     return fibNumbers;
// }
// // Решение за счет больших чисел 5252345234n последний символ n
// // Сначала решил при помощи своей функции SubtrackBigNum
// console.log(fibonacci(4782n)[4781].toString().length); //4782 V

// 26 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Reciprocal Cycles
/* <p>A unit fraction contains $1$ in the numerator. The decimal representation of the unit fractions with denominators $2$ to $10$ are given:</p>
\begin{align}
1/2 &amp;= 0.5\\
1/3 &amp;=0.(3)\\
1/4 &amp;=0.25\\
1/5 &amp;= 0.2\\
1/6 &amp;= 0.1(6)\\
1/7 &amp;= 0.(142857)\\
1/8 &amp;= 0.125\\
1/9 &amp;= 0.(1)\\
1/10 &amp;= 0.1
\end{align}
<p>Where $0.1(6)$ means $0.166666\cdots$, and has a $1$-digit recurring cycle. It can be seen that $1/7$ has a $6$-digit recurring cycle.</p>
<p>Find the value of $d \lt 1000$ for which $1/d$ contains the longest recurring cycle in its decimal fraction part.</p> */

// function devideFraction(num1, num2) {
//     let multiplier = 1;
//     let result = 0;
//     let numerator = num1;
//     const denomenator = num2;
//     let chainNumerators = [];
//     // let flag = true;

//     while (chainNumerators.indexOf(numerator) == -1) {
//         // if(flag) {
//         //     flag = false;
//         // }
//         const check = numerator % denomenator;
//         switch (check) {
//             case 0:
//                 result = result + numerator / denomenator / multiplier;
//                 return { result: result, arr: chainNumerators, index: chainNumerators.indexOf(numerator) };
//             default:
//                 if (numerator - denomenator < 0) {
//                 //    if (flag && numerator!=num1) chainNumerators.push(numerator);
//                     multiplier = multiplier * 10;
//                     numerator = numerator * 10;
//                     // flag = true;
//                     // console.log(numerator);
//                     continue;
//                 }
//                 if (numerator - denomenator > 0) {
//                     // if (flag) {
//                     //     flag = false;
//                     // }
//                     chainNumerators.push(numerator);
//                     result = result + Math.floor(numerator / denomenator) / multiplier;
//                     numerator = check;
//                     // console.log(result);
//                 }
//         }

//     }
//     return { result: result, arr: chainNumerators, index: chainNumerators.indexOf(numerator) };
// }

// let answer = devideFraction(1,99);
// console.log(answer.result, answer.arr, answer.index);

// function findmax() {
//     let maxcycle = 0;
//     let devider = 0;
//     let maxvalue = {};
//     for(let i=1; i<1000; i++) {
//         const value = devideFraction(1,i);
//         if(value.arr.length-value.index > maxcycle) {
//             maxcycle = value.arr.length-value.index;
//             devider = i;
//             maxvalue = value;
//         }
//     }
//     console.log(maxcycle);
//     console.log(devider);
//     console.log(maxvalue);
// }

// findmax(); //893 V

// 27 Problem ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Quadratic Primes
/* <p>Euler discovered the remarkable quadratic formula:</p>
<p class="center">$n^2 + n + 41$</p>
<p>It turns out that the formula will produce $40$ primes for the consecutive integer values $0 \le n \le 39$. However, when $n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41$ is divisible by $41$, and certainly when $n = 41, 41^2 + 41 + 41$ is clearly divisible by $41$.</p>
<p>The incredible formula $n^2 - 79n + 1601$ was discovered, which produces $80$ primes for the consecutive values $0 \le n \le 79$. The product of the coefficients, $-79$ and $1601$, is $-126479$.</p>
<p>Considering quadratics of the form:</p>
<blockquote>
$n^2 + an + b$, where $|a| &lt; 1000$ and $|b| \le 1000$<br><br><div>where $|n|$ is the modulus/absolute value of $n$<br>e.g. $|11| = 11$ and $|-4| = 4$</div>
</blockquote>
<p>Find the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n = 0$.</p>
</div><br></br> */

// function isPrime(num) {
//     if (num<0) return false;
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     return true;
// }

// function producer() {

//     let maxlength = 0;
//     const k = [0, 0];
//     const primesnumber = [];

//     for (let i = 999; i > -999; i--) {
//         for (let j = 1000; j >= -1000; j--) {
//             let n = 0;

//             while (isPrime(n**2 + i * n + j)) {
//                 n++;
//                 if (n > maxlength)  {
//                     maxlength = n;
//                     k[0] = i; k[1] = j;
//                 }

//             }
//         }
//     }
//     return { maxlength: maxlength, coef: k }
// }

// console.log(producer()); // 59231

// 28 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Number Spiral Diagonals
// 

// let base = [
//     [0, 0, 0, 0, 0],
//     [0, 0, 0, 0, 0],
//     [0, 0, 0, 0, 0],
//     [0, 0, 0, 0, 0],
//     [0, 0, 0, 0, 0]

// ];

//     let base = Array.from(Array(1001), ()=>Array(1001).fill(0));

// function fillarray(base) {

//     base[500][500] = 1;
//     base[50][501] = 2;

//     let n = 3;
//     let i = 501;
//     let j = 501;
//     let count = 1
//     let prevcount = 2
//     let countwhile=2
//     cycle:
//     while (base[0][1000] == 0) {
//         count = prevcount;
//         while (count != 0) {
//             // console.log(count);
//             base[i][j] = n;
//             if(base[0][1000] !== 0)break cycle;
//             n++; j--;
//             count--;
//         }
//         // console.log(base)
//         count = prevcount;

//         while (count != 0) {
//             // console.log(count);
//             base[i][j] = n;
//             if(base[0][1000] !== 0)break cycle;
//             n++; i--;
//             count--;
//             if (count == 0) prevcount++;
//         }
//         // console.log(base)
//         // console.log(count,i,j);
//         count = prevcount;
//         while (count != 0) {
//             base[i][j] = n;
//             if(base[0][1000] !== 0)break cycle;
//             n++; j++;
//             count--;
//         }
//         count = prevcount;
//         while (count != 0) {
//             base[i][j] = n;
//             if(base[0][1000] !== 0)break cycle;
//             n++; i++;
//             count--;
//             if (count == 0) prevcount++;

//         }
//         // countwhile--;
//     }
//     console.log(base);
//     let sum = 0
//     for(let i = 0; i<base.length;i++) {
//         sum+=base[i][i];
//         sum+=base[base.length-1-i][i];
//     }
//     console.log(sum);
// }
// fillarray(base); // 669171002 -1 V

// 29 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Distinct Powers
/* <p>Consider all integer combinations of $a^b$ for $2 \le a \le 5$ and $2 \le b \le 5$:</p>
\begin{matrix}
2^2=4, &amp;2^3=8, &amp;2^4=16, &amp;2^5=32\\
3^2=9, &amp;3^3=27, &amp;3^4=81, &amp;3^5=243\\
4^2=16, &amp;4^3=64, &amp;4^4=256, &amp;4^5=1024\\
5^2=25, &amp;5^3=125, &amp;5^4=625, &amp;5^5=3125
\end{matrix}
<p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of $15$ distinct terms:
$$4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.$$</p>
<p>How many distinct terms are in the sequence generated by $a^b$ for $2 \le a \le 100$ and $2 \le b \le 100$?</p> */

// function findsize() {
//     let set = new Set();
//     for(let i=2n; i<=100n; i++){
//         for(let j=2n; j<=100; j++){
//             set.add(i**j);
//         }
//     }
//     console.log(set.size);
// }

// findsize(); //9183 V

// // 30 Problem
// // Digit Fifth Powers
// /* <p>Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:
// \begin{align}
// 1634 &amp;= 1^4 + 6^4 + 3^4 + 4^4\\
// 8208 &amp;= 8^4 + 2^4 + 0^4 + 8^4\\
// 9474 &amp;= 9^4 + 4^4 + 7^4 + 4^4
// \end{align}
// </p><p class="smaller">As $1 = 1^4$ is not a sum it is not included.</p>
// <p>The sum of these numbers is $1634 + 8208 + 9474 = 19316$.</p>
// <p>Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.</p> */

// // let max number = 9**5+9**5+9**5+9**5+9**5+9**5+9**5+9**5+9**5

// function finddigit(num){
//     let strnum = num.toString()
//     let length = strnum.length;
//     let arrnum = [];
//     for(let i=0; i<length; i++){
//         arrnum.push(parseInt(strnum.slice(i,i+1)));
//     }
//     return arrnum;
// }

// function sumofpower5() {
//     let arr = [];
//     for(let i = 1; i<500000; i++) {
//         let arrnum = finddigit(i);
//         let res = arrnum.reduce((acc,elem)=>acc+elem**5,0);
//         if(res == i) arr.push(i);
//     }
//     let sum = arr.reduce((acc,elem)=>acc+elem,0);
//     return sum;
// }

// // console.log(finddigit(1655535));
// console.log(sumofpower5()); // 443839 V

//31 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Coin Sums
// In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:

// 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).
// It is possible to make £2 in the following way:

// 1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
// How many different ways can £2 be made using any number of coins?

// 200 = a + 2b +5c + 10d + 20 e + 50f + 100 g + 200h
// let cnt = 0;

// for (let a = 0; a<201; a++) {
//     for (let b = 0; b<101; b++) {
//         for (let c=0; c<41; c++) {
//             for (let d=0; d<21; d++) {
//                 for (let e=0; e<11; e++) {
//                     for(let f=0; f<5; f++) {
//                         for(let g=0; g<3; g++) {
//                             if((a+2*b+5*c+10*d+20*e+50*f+100*g) == 200) cnt++; 
//                         }
//                     }
//                 }
//             }
//         }
//     }
// }

// console.log(cnt); 73681 + 1 V

// 32 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Pandigital Products

/* <p>We shall say that an $n$-digit number is pandigital if it makes use of all the digits $1$ to $n$ exactly once; for example, the $5$-digit number, $15234$, is $1$ through $5$ pandigital.</p>
<p>The product $7254$ is unusual, as the identity, $39 \times 186 = 7254$, containing multiplicand, multiplier, and product is $1$ through $9$ pandigital.</p>
<p>Find the sum of all products whose multiplicand/multiplier/product identity can be written as a $1$ through $9$ pandigital.</p>
<div class="note">HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.</div> */

// 1 2 3 4 5 6 7 8 9
// a b c d e f g h k

// function findpandigital() {
//     let sets = [];
//     for (let a=1; a<=9; a++) {
//         for (let b=1; b<=9; b++) {
//             if(b==a) continue;
//             for (let c=1; c<=9; c++) {
//                 if (c==a || c == b) continue;
//                 for (let d=1; d<=9; d++){
//                     if (d==a || d==b || d==c) continue;
//                     for (let e=1; e<=9; e++) {
//                         if( e==a || e==b || e==c || e==d) continue;
//                         for (let f=1; f<=9; f++) {
//                             if(f==a || f==b || f==c || f==d || f==e) continue;
//                             for (let g=1; g<=9; g++) {
//                                 if(g==a || g==b || g==c || g==d || g==e || g==f) continue;
//                                 for (let h=1; h<=9; h++) {
//                                     if (h==a || h==b || h==c || h==d || h==e || h==f || h==g) continue;
//                                     for (let k=1; k<=9; k++) {
//                                         if (k==a || k==b || k==c || k==d || k==e || k==f || k==g || k==h) continue;
//                                         // console.log(a*10 + b);
//                                         // console.log(c*10**2 + d*10 + e);
//                                         // console.log(f*10**3+ g*10**2 + h*10 + k);
//                                         // if(((a*10 + b) * (c*10**2 + d*10 + e)) == (f*10**3+ g*10**2 + h*10 + k)) sets.push(f*10**3+ g*10**2 + h*10 + k) // sets.push([a*10 + b,c*10**2 + d*10 + e,f*10**3+ g*10**2 + h*10 + k])
//                                         if(((a*10**2 + b*10 + c) * (d*10 + e)) == (f*10**3+ g*10**2 + h*10 + k)) sets.push(f*10**3+ g*10**2 + h*10 + k)//sets.push([a*10**2 + b*10 + c,d*10 + e,f*10**3+ g*10**2 + h*10 + k])
//                                         // if((a * (b*10**3+c*10**2+d*10 + e)) == (f*10**3+ g*10**2 + h*10 + k)) sets.push(f*10**3+ g*10**2 + h*10 + k)
//                                     }
//                                 }
//                             }
//                         }
//                     }

//                 }

//             }

//         }
//     }
//     console.log(sets);
//     let res = 0
//     for (let i=2; i<sets.length; i++) {
//         res += sets[i];
//     }
//     return res;
// }

// //30424

// // 6952,7852
// console.log(findpandigital()); // 45228 V

// 33 Problem ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// DIgit Cancelling Fractions

// The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 
// , which is correct, is obtained by cancelling the 9s.

// We shall consider fractions like, 30/50 =3/5 , to be trivial examples.

// There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.

// If the product of these four fractions is given in its lowest common terms, find the value of the denominator.

// function findfraction() {
//     const arr = [];

//     // a b c number

//     for (let a = 1; a <= 9; a++) {
//         for (let b = 1; b <= 9; b++) {
//             for (let c = 1; c <= 9; c++) {
//                 if ((a * 10 + b )/ (b * 10 + c) == a / c && (a * 10 + b )/ (b * 10 + c) < 1) {arr.push([a,b,c])}
//             }
//         }
//     }
//     console.log(arr);
// }
// // 24206
// findfraction()
// // 19 13 2 7

// function factortoArray(n) {
//     let arr = [1];
//     for (let i = 2; i < Math.sqrt(n); i++) {
//         if (n % i === 0) {
//             arr.push(i);
//             arr.push(n / i);
//         }
//     }
//     arr.push(n);
//     return arr;
// }

// console.log(factortoArray(12103));

// 387296 / 38729600  193648/19364800  96824/9682400 48412/4841200   24206/2420600   12103/1210300 = 1/100 V

// 34 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Digit Factorials
// 145 is a curious number, as 1! + 4! + 5! = 1+ 24+120=145.
// Find the sum of all numbers which are equal to the sum of the factorial of their digits.
// Note: As 1!=1 and 2!=2 are not sums they are not included.

// function fact(number) {
//     let result = 1;
//     for(let i=2; i<=number; i++) {
//         result = result * i;
//     }
//     return result;
// }

// function finddigit(num){
//     let strnum = num.toString()
//     let length = strnum.length;
//     let arrnum = [];
//     for(let i=0; i<length; i++){
//         arrnum.push(BigInt(parseInt(strnum.slice(i,i+1))));
//     }
//     return arrnum;
// }

// function findsumfactorial() {
//     const arr = [];
//     let memo = {
//         0:1n,
//         1:1n,
//         2:2n,
//         3:6n,
//         4:24n,
//         5:120n,
//         6:720n,
//         7:5040n,
//         8:40320n,
//         9:362880n
//     };

//     for(let i= 3n; i<100000000n; i=i+1n ){
//         let checkarr = finddigit(i);
//         let sumfact = 0n;
//         for(let i =0; i<checkarr.length; i++) {
//             sumfact+= memo[checkarr[i]];
//         }

//         if(sumfact==i) arr.push(i);
//     }

//     console.log(arr);
// }

// findsumfactorial();

// console.log(fact(8));
// console.log(fact(9));

// console.log(finddigit(1554n));

// 35 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Circular Primes
/* <p>The number, $197$, is called a circular prime because all rotations of the digits: $197$, $971$, and $719$, are themselves prime.</p>
<p>There are thirteen such primes below $100$: $2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79$, and $97$.</p>
<p>How many circular primes are there below one million?</p> */


// function finddigit(num) {
//     let strnum = num.toString()
//     let length = strnum.length;
//     let arrnum = [];
//     for (let i = 0; i < length; i++) {
//         arrnum.push(BigInt(parseInt(strnum.slice(i, i + 1))));
//     }
//     return arrnum;
// }

// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     return true;
// }

// function rotatenumber(num) {
//     const arr = [];

//     let chunks = finddigit(num);
//     arr.push([...chunks]);
//     let times = chunks.length;
//     let memory = 0;
//     for (let j = 0; j < times-1; j++) {

//         for (let i = 0; i < times; i++) {
//             if (i == 0) {
//                 memory = chunks[times - 1];
//                 chunks[times - 1] = chunks[0];
//             }
//             else if (i == times - 1) {
//                 chunks[i - 1] = memory;
//                 arr.push([...chunks]);
//             } else {
//                 chunks[i - 1] = chunks[i];
//             }
//         }

//     }

//     return arr;
// }

// function cntcircularprimes() {
//     const knapsack = [];
//     cycle:
//     for (let i = 1; i < 100; i++) {
//         if (!isPrime(i)) continue;
//         const combo = rotatenumber(i);
//         for (let j = 0; j < combo.length; j++) {
//             if (!isPrime(parseInt(combo[j].join('')))) continue cycle;
//         }
//         knapsack.push(i);
//     }
//     return knapsack;Number(decimal).toString(2)
// }

// console.log(cntcircularprimes()); 55 V

// 36 Problem
// Double-base Palindromes
/* <p>The decimal number, $585 = 1001001001_2$ (binary), is palindromic in both bases.</p>
<p>Find the sum of all numbers, less than one million, which are palindromic in base $10$ and base $2$.</p>
<p class="smaller">(Please note that the palindromic number, in either base, may not include leading zeros.)</p> */

// function finddigit(num) {
//     let strnum = num.toString()
//     let length = strnum.length;
//     let arrnum = [];
//     for (let i = 0; i < length; i++) {
//         arrnum.push(parseInt(strnum.slice(i, i + 1)));
//     }
//     return arrnum;
// }

// function isPalindrombase10(num){
//     let chunks = finddigit(num);
//     for (let i = 0; i<(chunks.length-1)/2; i++) {
//         if(chunks[i]!=chunks[chunks.length-1-i]) return false;
//     }
//     return true;
// }

// function isPalindrombase2(num){
//     let chunks = Number(num).toString(2)
//     for (let i = 0; i<(chunks.length-1)/2; i++) {
//         console.log(chunks[i],chunks[chunks.length-1-i]);
//         if(chunks[i]!=chunks[chunks.length-1-i]) return false;
//     }
//     return true;
// }

// function sumPalindromic() {
//     let arr = [];
//     for (let i=0; i<1000000; i++) {
//         if(isPalindrombase10(i) && isPalindrombase2(i)) arr.push(i);
//     }
//     console.log(arr.reduce((acc,elem)=>acc+elem));
// }

// sumPalindromic();

// 37 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// // Truncatable Primes
// <p>The number $3797$ has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: $3797$, $797$, $97$, and $7$. Similarly we can work from right to left: $3797$, $379$, $37$, and $3$.</p>
// <p>Find the sum of the only eleven primes that are both truncatable from left to right and right to left.</p>
// <p class="smaller">NOTE: $2$, $3$, $5$, and $7$ are not considered to be truncatable primes.</p>

// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     if(num==1) return false;
//     return true;
// }

// function findelevenPrime() {
//     let arrprimes = [];
//     // let number = 3797;
//     cycle:
//    for(let number = 11; arrprimes.length<11; number++) {
//         let stringnumber = Number(number).toString(10);
//         let copystring = stringnumber;
//         for(let i=0; i<stringnumber.length; i++){
//             if(!isPrime(parseInt(stringnumber.slice(i))) || !isPrime(parseInt(stringnumber.slice(0,stringnumber.length-1-i)))) {
//                 number ++;
//                 continue cycle;
//             }
//         }
//         arrprimes.push(number);
//         number++;
//     }
//     return arrprimes;
// }


// console.log(findelevenPrime());
// console.log(findelevenPrime().reduce((acc,elem)=>acc+elem)); // 748317 V

//38 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Pandigital Multiples
/* <p>Take the number $192$ and multiply it by each of $1$, $2$, and $3$:</p>
\begin{align}
192 \times 1 &amp;= 192\\
192 \times 2 &amp;= 384\\
192 \times 3 &amp;= 576
\end{align}
<p>By concatenating each product we get the $1$ to $9$ pandigital, $192384576$. We will call $192384576$ the concatenated product of $192$ and $(1,2,3)$.</p>
<p>The same can be achieved by starting with $9$ and multiplying by $1$, $2$, $3$, $4$, and $5$, giving the pandigital, $918273645$, which is the concatenated product of $9$ and $(1,2,3,4,5)$.</p>
<p>What is the largest $1$ to $9$ pandigital $9$-digit number that can be formed as the concatenated product of an integer with $(1,2, \dots, n)$ where $n \gt 1$?</p> */

// a b c d e f g h k
// 1 2 3 4 5 6 7 8 9 


// function isPandigit(num) {
//     let strnum = Number(num).toString(10);
//     if (strnum.length != 9) return false;
//     let set = new Set(strnum);
//     if (set.size != 9) return false;
//     if (set.has('0')) return false;
//     return true;
// }

// function concutnumbers(num1, num2) {
//     return Number(num1).toString() + Number(num2).toString();
// }

// function findMaxPandigit() {
//     let maxpandigit = 0;
//     for (let i = 1; i < 10000000; i++) {
//         let arrN = [];
//         multiplier = 2;
//         let sum = Number(i).toString();
//         do {
//             sum = sum + Number(i * multiplier).toString();



//             multiplier++
//         } while (sum.length < 9);
//         if(isPandigit(sum)) {
//             if(maxpandigit<parseInt(sum)) maxpandigit=parseInt(sum);
//         }
//     }
//     return maxpandigit;
// }

// console.log(findMaxPandigit()); // 932718654 V

// 39 Problem ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Integer Right Triangles

/* <p>If $p$ is the perimeter of a right angle triangle with integral length sides, $\{a, b, c\}$, there are exactly three solutions for $p = 120$.</p>
<p>$\{20,48,52\}$, $\{24,45,51\}$, $\{30,40,50\}$</p>
<p>For which value of $p \le 1000$, is the number of solutions maximised?</p> */

// function maxcnttriangle() {
//     arrtriangle = [];
//     for (let i = 1; i < 999; i++) {
//         for (let j = 1; j < 999; j++) {
//             for (let n = j + 1; n < 1000; n++) {
//                 if (i ** 2 + j ** 2 == n ** 2) arrtriangle.push([i, j, n]);
//             }
//         }
//     }
//     // console.log(arrtriangle);
//     let newarr = arrtriangle.map(el => el.reduce((acc, elem) => acc + elem));
//     const count = {};
//     newarr.forEach(i => count[i] = (count[i] || 0) + 1);
//     console.log(count);
//     console.log(newarr);

//     const getMaxKey = o => Object.entries(o).reduce((r, e) =>(e[0]<=1000 && e[1] > r[1]) ? e : r)[0]
//     const result = getMaxKey(count);
//     console.log(result);
// }

// maxcnttriangle(); // 840 V

// 40 Problem 
// Champernowne's Constant
/*<p>An irrational decimal fraction is created by concatenating the positive integers:
$$0.12345678910{\color{red}\mathbf 1}112131415161718192021\cdots$$</p>
<p>It can be seen that the $12$<sup>th</sup> digit of the fractional part is $1$.</p>
<p>If $d_n$ represents the $n$<sup>th</sup> digit of the fractional part, find the value of the following expression.
$$d_1 \times d_{10} \times d_{100} \times d_{1000} \times d_{10000} \times d_{100000} \times d_{1000000}$$</p> */

// function findfractionalpart() {
//     let strnum = '.';
//     for( let i = 1; i<1000000; i++) {
//         strnum += i;
//     }
//     return strnum[1]*strnum[10]*strnum[100]*strnum[1000]*strnum[10000]*strnum[100000]*strnum[1000000];

// }

// console.log(findfractionalpart()); // 210 V

// 41 Problem
// Pandigital Prime

// We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.
// What is the largest n-digit pandigital prime that exists?

// function isPandigit(num) {
//     let strnum = Number(num).toString(10);
//     const comondigits = strnum.length;
//     if (comondigits == 9) {
//         if (strnum.length != 9) return false;
//         let set = new Set(strnum);
//         if (set.size != 9) return false;
//         if (set.has('0')) return false;
//         return true;
//     } else if (comondigits == 8){
//         if (strnum.length != 8) return false;
//         let set = new Set(strnum);
//         if (set.size != 8) return false;
//         if (set.has('0') || set.has('9')) return false;
//         return true;
//     } else if (comondigits == 7){
//         if (strnum.length != 7) return false;
//         let set = new Set(strnum);
//         if (set.size != 7) return false;
//         if (set.has('0') || set.has('9') || set.has('8')) return false;
//         return true;
//     } else if (comondigits == 6){
//         if (strnum.length != 6) return false;
//         let set = new Set(strnum);
//         if (set.size != 6) return false;
//         if (set.has('0') || set.has('9') || set.has('8') || set.has('7')) return false;
//         return true;
//     } else if (comondigits == 5){
//         if (strnum.length != 5) return false;
//         let set = new Set(strnum);
//         if (set.size != 5) return false;
//         if (set.has('0') || set.has('9') || set.has('8') || set.has('7') || set.has('6')) return false;
//         return true;
//     } else if (comondigits == 4){
//         if (strnum.length != 4) return false;
//         let set = new Set(strnum);
//         if (set.size != 4) return false;
//         if (set.has('0') || set.has('9') || set.has('8') || set.has('7') || set.has('6') || set.has('5')) return false;
//         return true;
//     } else if (comondigits == 3){
//         if (strnum.length != 3) return false;
//         let set = new Set(strnum);
//         if (set.size != 3) return false;
//         if (set.has('0') || set.has('9') || set.has('8') || set.has('7') || set.has('6') || set.has('5') || set.has('4')) return false;
//         return true;
//     } else if (comondigits == 2){
//         if (strnum.length != 2) return false;
//         let set = new Set(strnum);
//         if (set.size != 2) return false;
//         if (set.has('0') || set.has('9') || set.has('8') || set.has('7') || set.has('6') || set.has('5') || set.has('4') || set.has('3')) return false;
//         return true;
//     }
// }

// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     if(num==1) return false;
//     return true;
// }

// function findbigestPrime() {
//     let num = 0;
//     for (let i = 0; i<999999999; i++) {
//         if(isPandigit(i) && isPrime(i)) {
//             if (i>num) num = i;
//         }
//     }
//     console.log(num);
// }

// findbigestPrime() // 7652413 V

// 42 Problem+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Coded Triangle Numbers

/* <p>The $n$<sup>th</sup> term of the sequence of triangle numbers is given by, $t_n = \frac12n(n+1)$; so the first ten triangle numbers are:
$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
<p>By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is $19 + 11 + 25 = 55 = t_{10}$. If the word value is a triangle number then we shall call the word a triangle word.</p>
<p>Using <a href="resources/documents/0042_words.txt">words.txt</a> (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?</p> */

// const sequence = [3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276,
//     300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990,
//     1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891,
//     1953, 2016, 2080, 2145, 2211, 2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 3081,
//     3160, 3240, 3321, 3403, 3486, 3570, 3655, 3741, 3828, 3916, 4005, 4095, 4186, 4278, 4371, 4465, 4560,
//     4656, 4753, 4851, 4950];

// const arrresult = [1];

// document.querySelector('[type="file"]').addEventListener('change', (e) => {
//     const file = e.target.files[0];
//     const reader = new FileReader();
//     reader.readAsText(file);
//     reader.addEventListener('load', (e) => {
//         let src = e.target.result;
//         src ='[' + src + ']';
//         console.log(src);
//         const words = JSON.parse(src);
//         console.log(words[0]);
//         words.forEach(element => {
//             const sum = element.split('').reduce((acc, elem) => acc + elem.charCodeAt() - 64, 0);
//            if (sequence.indexOf(sum) !=-1) arrresult.push(element);
//         });
//         console.log(arrresult.length);
//     });

// })

// function fillseq(seq) {
//     for (let i = 1; i < 100; i++) {
//         seq[i] = 1 / 2 * i * (i + 1);
//     }
// }

// Answer: 162 V

// 43 Problem++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  Sub-srting Divisibility
/* <p>The number, $1406357289$, is a $0$ to $9$ pandigital number because it is made up of each of the digits $0$ to $9$ in some order, but it also has a rather interesting sub-string divisibility property.</p>
<p>Let $d_1$ be the $1$<sup>st</sup> digit, $d_2$ be the $2$<sup>nd</sup> digit, and so on. In this way, we note the following:</p>
<ul><li>$d_2d_3d_4=406$ is divisible by $2$</li>
<li>$d_3d_4d_5=063$ is divisible by $3$</li>
<li>$d_4d_5d_6=635$ is divisible by $5$</li>
<li>$d_5d_6d_7=357$ is divisible by $7$</li>
<li>$d_6d_7d_8=572$ is divisible by $11$</li>
<li>$d_7d_8d_9=728$ is divisible by $13$</li>
<li>$d_8d_9d_{10}=289$ is divisible by $17$</li>
</ul><p>Find the sum of all $0$ to $9$ pandigital numbers with this property.</p> */

// let numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']


// function permuntation_WO(inputarray) {
//     const outputArray = [];

//     if (inputarray.length === 1) {
//         return [[inputarray[0]]];
//     }

//     const newArray = permuntation_WO(inputarray.slice(1));
//     // most nested call return [['d']]
//     // console.log(newArray);

//     const option = inputarray[0];


//     for (const permontation of newArray) {
//         for (let i = 0; i <= permontation.length; i++) {
//             const firstelement = permontation.slice(0, i);
//             const lastelement = permontation.slice(i);
//             outputArray.push(firstelement.concat(option).concat(lastelement));
//         }

//     }
//     return outputArray;
// }

// function solve42problem(numbers) {
//     let pandigitals = permuntation_WO(numbers);
//     // for(let i=0; i<pandigitals.length;)
//     let searchnum = []
//     pandigitals.forEach(element => {
//         for (let i = 1; i < element.length - 2; i++) {
//             let num = element[i] + element[i + 1] + element[i + 2];
//             if (i == 1 && parseInt(num) % 2 != 0) break;
//             if (i == 2 && parseInt(num) % 3 != 0) break;
//             if (i == 3 && parseInt(num) % 5 != 0) break;
//             if (i == 4 && parseInt(num) % 7 != 0) break;
//             if (i == 5 && parseInt(num) % 11 != 0) break;
//             if (i == 6 && parseInt(num) % 13 != 0) break;
//             if (i == 7 && parseInt(num) % 17 != 0) break; 
//             if (i == 7 && parseInt(num) % 17 == 0) searchnum.push(element);

//         }
//     });
//     let sum = 0
//     searchnum.forEach(elem=>sum+=+parseInt(elem.join('')));
//     console.log(sum);


// }

// solve42problem(numbers); // 16695334890  V

// 44 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Pentagon numbers

// <p>Pentagonal numbers are generated by the formula, $P_n=n(3n-1)/2$. The first ten pentagonal numbers are:
// $$1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \dots$$</p>
// <p>It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, $70 - 22 = 48$, is not pentagonal.</p>
// <p>Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and $D = |P_k - P_j|$ is minimised; what is the value of $D$?</p>

// function findpentagon() {
//     let arr = [];
//     let searchnum = [];
//     for (let i =1; i<1000; i++) {
//         let x = i*(3*i - 1)/2;
//         arr.push(x);
//     }
//     for(let i=0; i<arr.length; i++) {
//         for(let j=0; j<arr.length; j++) {
//             let x = arr[i]+arr[j];
//             let y = Math.abs(arr[j]-arr[i]);
//             if (arr.indexOf(x)!=-1 && arr.indexOf(y)!=-1) searchnum.push([arr[i],arr[j]]); //arr.indexOf(y)!=-1
//         }
//     }

//     console.log(searchnum);  
// }

// findpentagon(); // 5482660 V

// 45 Problem 
// Triangular, Pentogonal, Hexagonal
/* <p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p>
<table><tr><td>Triangle</td>
<td> </td>
<td>$T_n=n(n+1)/2$</td>
<td> </td>
<td>$1, 3, 6, 10, 15, \dots$</td>
</tr><tr><td>Pentagonal</td>
<td> </td>
<td>$P_n=n(3n - 1)/2$</td>
<td> </td>
<td>$1, 5, 12, 22, 35, \dots$</td>
</tr><tr><td>Hexagonal</td>
<td> </td>
<td>$H_n=n(2n - 1)$</td>
<td> </td>
<td>$1, 6, 15, 28, 45, \dots$</td>
</tr></table><p>It can be verified that $T_{285} = P_{165} = H_{143} = 40755$.</p>
<p>Find the next triangle number that is also pentagonal and hexagonal.</p> */

// function findnumber() {
//     let number = 0;
//     for (let i = 286; i < 100000; i++) {
//         for (let j = i; j > 0; j--) {
//             let x = (i * (i + 1)) / 2;
//             if (x == (j * (3 * j - 1)) / 2) {
//                 for (let a = j; a > 0; a--) {
//                     if (x == a * (2 * a - 1)) number = x;
//                 }


//             }
//         }
//     }
//     console.log(number);
// }

// findnumber();  // 1533776805

// 46 Problem ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Goldbach's Other Conjecture

/* <p>It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.</p>
\begin{align}
9 = 7 + 2 \times 1^2\\
15 = 7 + 2 \times 2^2\\
21 = 3 + 2 \times 3^2\\
25 = 7 + 2 \times 3^2\\
27 = 19 + 2 \times 2^2\\
33 = 31 + 2 \times 1^2
\end{align}
<p>It turns out that the conjecture was false.</p>
<p>What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?</p> */


// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     if (num == 1) return false;
//     return true;
// }



// function findsmallest() {
//     number = 0;
//     let chain = [];
//     for (let i = 1; i < 999999; i++) {
//         if (isPrime(i)) chain.push(i);
//     }
//     console.log(chain);
//     let twiceTwo = [];
//     for (let i = 1; i < 1000; i++) {
//         let x = 2 * i ** 2;
//         twiceTwo.push(x);
//     }
//     console.log(twiceTwo);
//     cycle:
//     for (let i = 1; i < 10000; i++) {
//         if (i % 2 != 0 && !isPrime(i)) {
//             for (let j = 0; j < chain.length; j++) {
//                 if (i - chain[j] > 0) {
//                     for (let n = 0; n < twiceTwo.length; n++) {
//                         if ((i - chain[j] - twiceTwo[n]) == 0) continue cycle;
//                         if ((i - chain[j] - twiceTwo[n]) < 0) break;
//                     }
//                 }
//                 if (i - chain[j] < 0 && i!= 1) {
//                     number = i; break cycle;
//                 }
//             }
//         }
//     }
//     console.log(number); // 5777 V
// }

// findsmallest();

// 47 Problem ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Distinct Primes Factors

// <p>The first two consecutive numbers to have two distinct prime factors are:</p>
// \begin{align}
// 14 &amp;= 2 \times 7\\
// 15 &amp;= 3 \times 5.
// \end{align}
// <p>The first three consecutive numbers to have three distinct prime factors are:</p>
// \begin{align}
// 644 &amp;= 2^2 \times 7 \times 23\\
// 645 &amp;= 3 \times 5 \times 43\\
// 646 &amp;= 2 \times 17 \times 19.
// \end{align}
// <p>Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?</p>

// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     if (num == 1) return false;
//     return true;
// }

// function factortoPrimeCount(n,count) {
//     let arr = [];
//     let countPrime=0;
//     for (let i = 2; i < Math.sqrt(n) && countPrime<count; i++) {
//         if (n % i === 0)  {
//             if(isPrime(i)) countPrime++;
//             if(isPrime(n/i)) countPrime++;
//             arr.push(i);
//             arr.push(n / i);
//         }
//     }
//     // arr.push(n);
//     return countPrime==count;
// }

// console.log(factortoPrimeCount(16,3));


// function findFourConj() {
//     let sequence = [];
//     for(let i = 647; i<1000000; i++) {
//         if(factortoPrimeCount(i,4) && factortoPrimeCount(i+1,4) && factortoPrimeCount(i+2,4)&&factortoPrimeCount(i+3,4)) {
//             sequence.push(i,i+1,i+2,i+3);
//             break;
//         }
//     }
//     return sequence;
// }

// console.log(findFourConj()); // [134043, 134044, 134045, 134046] V

// 48 Problem ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Self Powers
/* <p>The series, $1^1 + 2^2 + 3^3 + \cdots + 10^{10} = 10405071317$.</p>
<p>Find the last ten digits of the series, $1^1 + 2^2 + 3^3 + \cdots + 1000^{1000}$.</p> */

// function sumBigNum(arr) {
//     let memory = 0;
//     let sum = '';
//     let maxnumdigits = 0;
//     for (el of arr) {
//         if (el.length > maxnumdigits) maxnumdigits = el.length;
//     }
//     const buildarr = arr.map((el) => {
//         // console.log(el);
//         while (el.length != maxnumdigits) { el = '0' + el; }
//         return el;
//     });
//     // console.log(buildarr);
//     for (let i = maxnumdigits - 1; i >= 0; i--) {
//         for (let j = 0; j < buildarr.length; j++) {
//             memory += +buildarr[j][i];
//             if (j === buildarr.length - 1) {
//                 let char = memory.toString();
//                 let suffix = char.slice(-1);
//                 sum = [suffix, sum].join('');
//                 prefix = char.slice(0, -1);
//                 memory = +prefix;
//             }
//         }
//     }
//     if (memory != 0) sum = memory.toString() + sum;
//     // console.log(sum);
//     return sum;
// }


// function multiplyBigNum(n1, n2) {
//     if(n1.length>10) n1 = n1.slice(n1.length-13);
//     if(n2.length>10) n2 = n2.slice(n1.length-13);
//     let arr_product = [];
//     let memory1 = 0;
//     let memory2 = '';
//     for (let i = n2.length - 1; i >= 0; i--) {
//         for (let j = n1.length - 1; j >= 0; j--) {
//             let product = +(n2[i]) * (+n1[j]) + memory1;
//             // console.log(product);
//             let midresult = product.toString();
//             if (j === 0) {
//                 memory2 = [midresult, memory2].join('');
//             } else {
//                 memory2 = [midresult.slice(-1), memory2].join('');
//             }
//             // console.log(memory2);
//             memory1 = +midresult.slice(0, -1);
//             // console.log(memory1);
//         }
//         arr_product.push(memory2);
//         memory1 = 0;
//         memory2 = '';
//     }
//     // console.log(arr_product);
//     // add to lower digit a zero before addition;
//     let times = 1;
//     for (let i = 1; i < arr_product.length; i++) {
//         let checktimes = times;
//         while (checktimes > 0) {
//             arr_product[i] = arr_product[i] + '0';
//             checktimes--;
//         }
//         times++;
//     }
//     // console.log(arr_product);
//     let res = sumBigNum(arr_product);
//     // res = res.slice(res.length-12);
//     return res;
// }
// // Функция n^n (pow-Number and its power). Рукурсия с мемоизацией.
// let memo = {};

// function powSelf(pow, memo, num = 0) {
//     if (memo[num]) return memo[num];
//     if (num === pow - 1) return pow;
//     let x = powSelf(pow, memo, num + 1);
//     memo[num] = x;
//     return multiplyBigNum(pow, x);
// }
// // Функция суммирования чисел
// function sumdigits(num) {
//     let res = '1';
//     for (let i = 2; i <= num; i++) {
//         let memo = {};
//         res = sumBigNum([res, powSelf(Number(i).toString(10), memo)])
//     }
//     return res;
// }

// console.log(sumdigits(1000)); //9110846700 V Второе решение использовать вместо чисел bim num например 1n

// 49 Problem +++++++++++++++++++++++++++++++++++++++++++++++++++++
// Prime Permutations

/* <p>The arithmetic sequence, $1487, 4817, 8147$, in which each of the terms increases by $3330$, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the $4$-digit numbers are permutations of one another.</p>
<p>There are no arithmetic sequences made up of three $1$-, $2$-, or $3$-digit primes, exhibiting this property, but there is one other $4$-digit increasing sequence.</p>
<p>What $12$-digit number do you form by concatenating the three terms in this sequence?</p> */

// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     if (num == 1) return false;
//     return true;
// }

// function find3numbers() {
//     let arr = [];
//     let search = [];
//     for (let i = 1000; i < 10000; i++) {
//         if (isPrime(i)) arr.push(i);
//     }
//     console.log(arr);
//     for (let i = 0; i < arr.length - 2; i++) {
//         for (let j = i + 1; j < arr.length; j++) {
//             let x = new Set(Number(arr[i]).toString(10));
//             let y = new Set(Number(arr[j]).toString(10));
//             let z = new Set([...x, ...y]);
//             if (x.size == z.size) {
//                 let dif = arr[j] - arr[i];
//                 let third = arr[j] + dif;
//                 if (arr.indexOf(third) != -1) {
//                     let a = new Set(Number(third).toString(10));
//                     let b = new Set([...x, ...a])
//                     if (y.size == b.size) {
//                         search.push([arr[i], arr[j], third]);
//                     }
//                 }

//             }
//         }
//     }
//     console.log(search);
// }

// find3numbers(); // [2969 6299 9629] V

//50 Problem+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/* <p>The prime $41$, can be written as the sum of six consecutive primes:</p>
$$41 = 2 + 3 + 5 + 7 + 11 + 13.$$
<p>This is the longest sum of consecutive primes that adds to a prime below one-hundred.</p>
<p>The longest sum of consecutive primes below one-thousand that adds to a prime, contains $21$ terms, and is equal to $953$.</p>
<p>Which prime, below one-million, can be written as the sum of the most consecutive primes?</p> */

// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i = 2; i <= pivot; i++) {
//         if (num % i === 0) return false;
//     }
//     if (num == 1) return false;
//     return true;
// }

// let arr = function(){
//       let arr = [];
//     for (let i = 1; i < 1000000; i++) {
//         if (isPrime(i)) arr.push(i);
//     }
//     return arr;
// } ()

// function findsequencesum(arr, start, Summa) {
  
//     let sum = 0;
//     let num = 0;
//     for (let i=start; i<arr.length; i++) {
//         sum+=arr[i];
//         if(sum>=Summa) {
//             num = i;   
//             break;
//         }
//     }
//     for( let i=num; i>0; i--) {
//         sum-=arr[i];
//         if(sum<Summa && isPrime(sum)) {
//             num = i-start;   
//             break;
//         }
//     }
//     return [sum,num];
// }

// function longestSum(arr, Summa) {
//     let maxSum = 0;
//     let maxchain = 0
//     for (let i=0; i<=arr.length; i++) {
//         let result = findsequencesum(arr,i,Summa);
//             // console.log(result,i);
//             if (result[1]>=maxchain) {
//             maxchain = result[1];
//             maxSum = result[0];
//         }
//     }
//     console.log(maxSum,maxchain);
// }
// console.log(arr);

// longestSum(arr,1000000);

