// 1+++++++++++++++++++++++++++++++++++++++++++++
// Multiples of 3 or 5
/* <p>If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.</p>
<p>Find the sum of all the multiples of $3$ or $5$ below $1000$.</p> */

// function sum3_5mult (num) {
//     let result=0;
//     for (let i=0; i<num;i++) {
//         if(i%3 === 0 || i%5 === 0) result += i;
//     }
//     return result;
// };

// console.log(sum3_5mult(1000)); // V

// 2 +++++++++++++++++++++++++++++++++++++++++++++
// Even Fibonacci Numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 
//  and , the first terms will be: 1 2 3 5 8 13 21 34 55 89 ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// function fibon_even_lt_4M(num) {    // num = 4 000 000 
//     let sum = 0;
//     const arrfibonachi = [1,1];
//     for (let i = 2; arrfibonachi[i-1]+arrfibonachi[i-2] <= num; i++) {
//         arrfibonachi[i] = arrfibonachi[i-1]+arrfibonachi[i-2];
//         if (arrfibonachi[i]%2===0) sum += arrfibonachi[i];
//     }
//     console.log(arrfibonachi);
//     return sum;
// }

// console.log(fibon_even_lt_4M(4000000)); // V

// 3 +++++++++++++++++++++++++++++++++++++++++++++
// Largest Prime Factor
// The prime factors of 13195 are 5 7 13 29
// What is the largest prime factor of the number 600 851 475 143 ?


// function isPrime(num) {
//     const pivot = Math.sqrt(num);
//     for (let i=2; i<=pivot; i++) {
//         if (num%i ===0) return false;
//     }
//     return true;
// }
// function largPrimFactor(num) {
//     console.log(num);
//     const factors = [];
//     const largfactors = [];
//     let pivot = Math.sqrt(num);
//     console.log(pivot);
//     for (let i=2; i<=pivot; i++) {
//         if(num%i === 0) {
//             factors.push(i);
//             largfactors.push(num/i);
//         }
//     }
//     console.log(factors);
//     console.log(largfactors);
//     for(let i=0; i<largfactors.length; i++) {
//         console.log(isPrime(largfactors[i]));
//         if(isPrime(largfactors[i])) return true;
//     }
//     for(let i=factors.length-1; i>=0; i--) {
//         console.log(factors[i]);
//         console.log(isPrime(factors[i]));
//         if(isPrime(factors[i])) return factors[i];
//     }
// //     let pivot = Math.floor(num^(1/2));
// //     for (let i = pivot; i <)
// }

// console.log(largPrimFactor(600851475143)); // Answer is 6857 V

// 4 +++++++++++++++++++++++++++++++++++++++++++++
// Largest Palindrome Product
/* <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two $2$-digit numbers is $9009 = 91 \times 99$.</p>
<p>Find the largest palindrome made from the product of two $3$-digit numbers.</p> */

function findPalindrom() {
    let palindrom = 0 ;  // x0000x

    for (let x = 999; x>0; x--) {
        for(let y = 999; y>0; y--) {
            let product = x*y;
            if (product>100000) {
                const a = Math.floor(product/100000);
                const b = Math.floor((product-a*100000)/10000);
                const c = Math.floor((product - a*100000 - b*10000)/1000);
                const d = Math.floor((product - a*100000 - b*10000 - c*1000)/100);
                const e = Math.floor((product - a*100000 - b*10000 - c*1000 - d*100)/10);
                const f = product - a*100000 - b*10000 - c*1000 - d*100 - e*10;
                // console.log(product);
                // console.log(a,b,c,d,e,f);
                if (a == f && b==e && c==d) {
                    if (product > palindrom) {
                        palindrom = product;
                        console.log(palindrom);
                    }
                }
            }
        }
    }
    return palindrom;   
}

console.log(findPalindrom());